// This file is part of Mangata.

// Copyright (C) 2020-2022 Mangata Foundation.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_xyk
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-01-09, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("mangata-kusama"), DB CACHE: 1024

// Executed Command:
// target/release/mangata-node
// benchmark
// pallet
// -l=info,runtime::collective=warn,xyk=warn
// --chain
// mangata-kusama
// --execution
// wasm
// --wasm-execution
// compiled
// --pallet
// *
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --template
// ./templates/module-weight-template.hbs
// --output
// ./benchmarks/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_xyk.
pub trait WeightInfo {
	fn create_pool() -> Weight;
	fn sell_asset() -> Weight;
	fn multiswap_sell_asset(x: u32, ) -> Weight;
	fn buy_asset() -> Weight;
	fn multiswap_buy_asset(x: u32, ) -> Weight;
	fn mint_liquidity() -> Weight;
	fn mint_liquidity_using_vesting_native_tokens() -> Weight;
	fn burn_liquidity() -> Weight;
	fn provide_liquidity_with_conversion() -> Weight;
	fn compound_rewards() -> Weight;
}

/// Weights for pallet_xyk using the Mangata node and recommended hardware.
pub struct ModuleWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_xyk::WeightInfo for ModuleWeight<T> {
	// Storage: `AssetRegistry::Metadata` (r:3 w:1)
	// Proof: `AssetRegistry::Metadata` (`max_values`: None, `max_size`: Some(756), added: 3231, mode: `MaxEncodedLen`)
	// Storage: `Bootstrap::ActivePair` (r:1 w:0)
	// Proof: `Bootstrap::ActivePair` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Xyk::Pools` (r:2 w:1)
	// Proof: `Xyk::Pools` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:5 w:5)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:1 w:1)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	// Storage: `Tokens::NextCurrencyId` (r:1 w:1)
	// Proof: `Tokens::NextCurrencyId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	// Storage: `Tokens::TotalIssuance` (r:1 w:1)
	// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	// Storage: `Xyk::LiquidityAssets` (r:0 w:1)
	// Proof: `Xyk::LiquidityAssets` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	// Storage: `Xyk::LiquidityPools` (r:0 w:1)
	// Proof: `Xyk::LiquidityPools` (`max_values`: None, `max_size`: Some(41), added: 2516, mode: `MaxEncodedLen`)
	fn create_pool() -> Weight {
		(Weight::from_parts(188_230_000, 0))
			.saturating_add(T::DbWeight::get().reads(14 as u64))
			.saturating_add(T::DbWeight::get().writes(12 as u64))
	}
	// Storage: `Maintenance::MaintenanceStatus` (r:1 w:0)
	// Proof: `Maintenance::MaintenanceStatus` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	// Storage: `AssetRegistry::Metadata` (r:2 w:0)
	// Proof: `AssetRegistry::Metadata` (`max_values`: None, `max_size`: Some(756), added: 3231, mode: `MaxEncodedLen`)
	// Storage: `Xyk::LiquidityAssets` (r:1 w:0)
	// Proof: `Xyk::LiquidityAssets` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	// Storage: `Tokens::TotalIssuance` (r:1 w:0)
	// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	// Storage: `Xyk::Pools` (r:3 w:1)
	// Proof: `Xyk::Pools` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:6 w:6)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:2 w:2)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	fn sell_asset() -> Weight {
		(Weight::from_parts(239_380_000, 0))
			.saturating_add(T::DbWeight::get().reads(16 as u64))
			.saturating_add(T::DbWeight::get().writes(9 as u64))
	}
	// Storage: `Maintenance::MaintenanceStatus` (r:1 w:0)
	// Proof: `Maintenance::MaintenanceStatus` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	// Storage: `Xyk::LiquidityAssets` (r:99 w:0)
	// Proof: `Xyk::LiquidityAssets` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	// Storage: `Tokens::TotalIssuance` (r:100 w:1)
	// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	// Storage: `AssetRegistry::Metadata` (r:100 w:0)
	// Proof: `AssetRegistry::Metadata` (`max_values`: None, `max_size`: Some(756), added: 3231, mode: `MaxEncodedLen`)
	// Storage: `Xyk::Pools` (r:297 w:198)
	// Proof: `Xyk::Pools` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:400 w:400)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:2 w:2)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	fn multiswap_sell_asset(x: u32, ) -> Weight {
		(Weight::from_parts(627_720_000, 0))
			// Standard Error: 509_553
			.saturating_add((Weight::from_parts(272_818_905, 0)).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(29 as u64))
			.saturating_add(T::DbWeight::get().reads((10 as u64).saturating_mul(x as u64)))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
			.saturating_add(T::DbWeight::get().writes((6 as u64).saturating_mul(x as u64)))
	}
	// Storage: `Maintenance::MaintenanceStatus` (r:1 w:0)
	// Proof: `Maintenance::MaintenanceStatus` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	// Storage: `AssetRegistry::Metadata` (r:2 w:0)
	// Proof: `AssetRegistry::Metadata` (`max_values`: None, `max_size`: Some(756), added: 3231, mode: `MaxEncodedLen`)
	// Storage: `Xyk::LiquidityAssets` (r:2 w:0)
	// Proof: `Xyk::LiquidityAssets` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	// Storage: `Tokens::TotalIssuance` (r:1 w:0)
	// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	// Storage: `Xyk::Pools` (r:4 w:1)
	// Proof: `Xyk::Pools` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:6 w:6)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:2 w:2)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	fn buy_asset() -> Weight {
		(Weight::from_parts(235_869_000, 0))
			.saturating_add(T::DbWeight::get().reads(18 as u64))
			.saturating_add(T::DbWeight::get().writes(9 as u64))
	}
	// Storage: `Maintenance::MaintenanceStatus` (r:1 w:0)
	// Proof: `Maintenance::MaintenanceStatus` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	// Storage: `AssetRegistry::Metadata` (r:100 w:0)
	// Proof: `AssetRegistry::Metadata` (`max_values`: None, `max_size`: Some(756), added: 3231, mode: `MaxEncodedLen`)
	// Storage: `Xyk::LiquidityAssets` (r:99 w:0)
	// Proof: `Xyk::LiquidityAssets` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	// Storage: `Tokens::TotalIssuance` (r:100 w:1)
	// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	// Storage: `Xyk::Pools` (r:297 w:198)
	// Proof: `Xyk::Pools` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:400 w:400)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:2 w:2)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	fn multiswap_buy_asset(x: u32, ) -> Weight {
		(Weight::from_parts(651_260_000, 0))
			// Standard Error: 536_937
			.saturating_add((Weight::from_parts(287_282_771, 0)).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(29 as u64))
			.saturating_add(T::DbWeight::get().reads((10 as u64).saturating_mul(x as u64)))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
			.saturating_add(T::DbWeight::get().writes((6 as u64).saturating_mul(x as u64)))
	}
	// Storage: `AssetRegistry::Metadata` (r:2 w:0)
	// Proof: `AssetRegistry::Metadata` (`max_values`: None, `max_size`: Some(756), added: 3231, mode: `MaxEncodedLen`)
	// Storage: `Xyk::LiquidityAssets` (r:1 w:0)
	// Proof: `Xyk::LiquidityAssets` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	// Storage: `Xyk::Pools` (r:1 w:1)
	// Proof: `Xyk::Pools` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	// Storage: `Tokens::TotalIssuance` (r:1 w:1)
	// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:5 w:5)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `Tokens::NextCurrencyId` (r:1 w:0)
	// Proof: `Tokens::NextCurrencyId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	// Storage: `ProofOfStake::PromotedPoolRewards` (r:1 w:0)
	// Proof: `ProofOfStake::PromotedPoolRewards` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:1 w:1)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(124), added: 2599, mode: `MaxEncodedLen`)
	// Storage: `ProofOfStake::RewardsInfo` (r:1 w:1)
	// Proof: `ProofOfStake::RewardsInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ProofOfStake::TotalActivatedLiquidity` (r:1 w:1)
	// Proof: `ProofOfStake::TotalActivatedLiquidity` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn mint_liquidity() -> Weight {
		(Weight::from_parts(224_910_000, 0))
			.saturating_add(T::DbWeight::get().reads(15 as u64))
			.saturating_add(T::DbWeight::get().writes(10 as u64))
	}
	// Storage: `Xyk::LiquidityAssets` (r:1 w:0)
	// Proof: `Xyk::LiquidityAssets` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	// Storage: `ProofOfStake::PromotedPoolRewards` (r:1 w:0)
	// Proof: `ProofOfStake::PromotedPoolRewards` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Vesting::Vesting` (r:2 w:2)
	// Proof: `Vesting::Vesting` (`max_values`: None, `max_size`: Some(1869), added: 4344, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Locks` (r:2 w:2)
	// Proof: `Tokens::Locks` (`max_values`: None, `max_size`: Some(1261), added: 3736, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:5 w:5)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `Xyk::Pools` (r:1 w:1)
	// Proof: `Xyk::Pools` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	// Storage: `Tokens::TotalIssuance` (r:1 w:1)
	// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	// Storage: `Tokens::NextCurrencyId` (r:1 w:0)
	// Proof: `Tokens::NextCurrencyId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn mint_liquidity_using_vesting_native_tokens() -> Weight {
		(Weight::from_parts(277_789_000, 0))
			.saturating_add(T::DbWeight::get().reads(14 as u64))
			.saturating_add(T::DbWeight::get().writes(11 as u64))
	}
	// Storage: `AssetRegistry::Metadata` (r:2 w:0)
	// Proof: `AssetRegistry::Metadata` (`max_values`: None, `max_size`: Some(756), added: 3231, mode: `MaxEncodedLen`)
	// Storage: `Xyk::LiquidityAssets` (r:1 w:0)
	// Proof: `Xyk::LiquidityAssets` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:1 w:1)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(124), added: 2599, mode: `MaxEncodedLen`)
	// Storage: `Xyk::Pools` (r:1 w:1)
	// Proof: `Xyk::Pools` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:5 w:5)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `ProofOfStake::PromotedPoolRewards` (r:1 w:0)
	// Proof: `ProofOfStake::PromotedPoolRewards` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ProofOfStake::RewardsInfo` (r:1 w:1)
	// Proof: `ProofOfStake::RewardsInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ProofOfStake::ActivatedNativeRewardsLiq` (r:1 w:0)
	// Proof: `ProofOfStake::ActivatedNativeRewardsLiq` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ProofOfStake::TotalActivatedLiquidity` (r:1 w:1)
	// Proof: `ProofOfStake::TotalActivatedLiquidity` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Tokens::TotalIssuance` (r:1 w:1)
	// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	fn burn_liquidity() -> Weight {
		(Weight::from_parts(206_760_000, 0))
			.saturating_add(T::DbWeight::get().reads(15 as u64))
			.saturating_add(T::DbWeight::get().writes(10 as u64))
	}
	// Storage: `Xyk::LiquidityPools` (r:1 w:0)
	// Proof: `Xyk::LiquidityPools` (`max_values`: None, `max_size`: Some(41), added: 2516, mode: `MaxEncodedLen`)
	// Storage: `AssetRegistry::Metadata` (r:2 w:0)
	// Proof: `AssetRegistry::Metadata` (`max_values`: None, `max_size`: Some(756), added: 3231, mode: `MaxEncodedLen`)
	// Storage: `Xyk::LiquidityAssets` (r:2 w:0)
	// Proof: `Xyk::LiquidityAssets` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	// Storage: `Tokens::TotalIssuance` (r:1 w:1)
	// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	// Storage: `Xyk::Pools` (r:4 w:1)
	// Proof: `Xyk::Pools` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:7 w:7)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `Maintenance::MaintenanceStatus` (r:1 w:0)
	// Proof: `Maintenance::MaintenanceStatus` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:2 w:2)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	// Storage: `Tokens::NextCurrencyId` (r:1 w:0)
	// Proof: `Tokens::NextCurrencyId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	// Storage: `ProofOfStake::PromotedPoolRewards` (r:1 w:0)
	// Proof: `ProofOfStake::PromotedPoolRewards` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn provide_liquidity_with_conversion() -> Weight {
		(Weight::from_parts(365_410_000, 0))
			.saturating_add(T::DbWeight::get().reads(22 as u64))
			.saturating_add(T::DbWeight::get().writes(11 as u64))
	}
	// Storage: `Xyk::LiquidityPools` (r:1 w:0)
	// Proof: `Xyk::LiquidityPools` (`max_values`: None, `max_size`: Some(41), added: 2516, mode: `MaxEncodedLen`)
	// Storage: `AssetRegistry::Metadata` (r:2 w:0)
	// Proof: `AssetRegistry::Metadata` (`max_values`: None, `max_size`: Some(756), added: 3231, mode: `MaxEncodedLen`)
	// Storage: `ProofOfStake::PromotedPoolRewards` (r:1 w:0)
	// Proof: `ProofOfStake::PromotedPoolRewards` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ProofOfStake::RewardsInfo` (r:1 w:1)
	// Proof: `ProofOfStake::RewardsInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Tokens::Accounts` (r:8 w:8)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `Xyk::LiquidityAssets` (r:2 w:0)
	// Proof: `Xyk::LiquidityAssets` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	// Storage: `Tokens::TotalIssuance` (r:2 w:2)
	// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	// Storage: `Xyk::Pools` (r:2 w:1)
	// Proof: `Xyk::Pools` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	// Storage: `Maintenance::MaintenanceStatus` (r:1 w:0)
	// Proof: `Maintenance::MaintenanceStatus` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:2 w:2)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	// Storage: `Tokens::NextCurrencyId` (r:1 w:0)
	// Proof: `Tokens::NextCurrencyId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:1 w:1)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(124), added: 2599, mode: `MaxEncodedLen`)
	// Storage: `ProofOfStake::TotalActivatedLiquidity` (r:1 w:1)
	// Proof: `ProofOfStake::TotalActivatedLiquidity` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn compound_rewards() -> Weight {
		(Weight::from_parts(557_650_000, 0))
			.saturating_add(T::DbWeight::get().reads(25 as u64))
			.saturating_add(T::DbWeight::get().writes(16 as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: `AssetRegistry::Metadata` (r:3 w:1)
	// Proof: `AssetRegistry::Metadata` (`max_values`: None, `max_size`: Some(756), added: 3231, mode: `MaxEncodedLen`)
	// Storage: `Bootstrap::ActivePair` (r:1 w:0)
	// Proof: `Bootstrap::ActivePair` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Xyk::Pools` (r:2 w:1)
	// Proof: `Xyk::Pools` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:5 w:5)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:1 w:1)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	// Storage: `Tokens::NextCurrencyId` (r:1 w:1)
	// Proof: `Tokens::NextCurrencyId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	// Storage: `Tokens::TotalIssuance` (r:1 w:1)
	// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	// Storage: `Xyk::LiquidityAssets` (r:0 w:1)
	// Proof: `Xyk::LiquidityAssets` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	// Storage: `Xyk::LiquidityPools` (r:0 w:1)
	// Proof: `Xyk::LiquidityPools` (`max_values`: None, `max_size`: Some(41), added: 2516, mode: `MaxEncodedLen`)
	fn create_pool() -> Weight {
		(Weight::from_parts(188_230_000, 0))
			.saturating_add(RocksDbWeight::get().reads(14 as u64))
			.saturating_add(RocksDbWeight::get().writes(12 as u64))
	}
	// Storage: `Maintenance::MaintenanceStatus` (r:1 w:0)
	// Proof: `Maintenance::MaintenanceStatus` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	// Storage: `AssetRegistry::Metadata` (r:2 w:0)
	// Proof: `AssetRegistry::Metadata` (`max_values`: None, `max_size`: Some(756), added: 3231, mode: `MaxEncodedLen`)
	// Storage: `Xyk::LiquidityAssets` (r:1 w:0)
	// Proof: `Xyk::LiquidityAssets` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	// Storage: `Tokens::TotalIssuance` (r:1 w:0)
	// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	// Storage: `Xyk::Pools` (r:3 w:1)
	// Proof: `Xyk::Pools` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:6 w:6)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:2 w:2)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	fn sell_asset() -> Weight {
		(Weight::from_parts(239_380_000, 0))
			.saturating_add(RocksDbWeight::get().reads(16 as u64))
			.saturating_add(RocksDbWeight::get().writes(9 as u64))
	}
	// Storage: `Maintenance::MaintenanceStatus` (r:1 w:0)
	// Proof: `Maintenance::MaintenanceStatus` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	// Storage: `Xyk::LiquidityAssets` (r:99 w:0)
	// Proof: `Xyk::LiquidityAssets` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	// Storage: `Tokens::TotalIssuance` (r:100 w:1)
	// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	// Storage: `AssetRegistry::Metadata` (r:100 w:0)
	// Proof: `AssetRegistry::Metadata` (`max_values`: None, `max_size`: Some(756), added: 3231, mode: `MaxEncodedLen`)
	// Storage: `Xyk::Pools` (r:297 w:198)
	// Proof: `Xyk::Pools` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:400 w:400)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:2 w:2)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	fn multiswap_sell_asset(x: u32, ) -> Weight {
		(Weight::from_parts(627_720_000, 0))
			// Standard Error: 509_553
			.saturating_add((Weight::from_parts(272_818_905, 0)).saturating_mul(x as u64))
			.saturating_add(RocksDbWeight::get().reads(29 as u64))
			.saturating_add(RocksDbWeight::get().reads((10 as u64).saturating_mul(x as u64)))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
			.saturating_add(RocksDbWeight::get().writes((6 as u64).saturating_mul(x as u64)))
	}
	// Storage: `Maintenance::MaintenanceStatus` (r:1 w:0)
	// Proof: `Maintenance::MaintenanceStatus` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	// Storage: `AssetRegistry::Metadata` (r:2 w:0)
	// Proof: `AssetRegistry::Metadata` (`max_values`: None, `max_size`: Some(756), added: 3231, mode: `MaxEncodedLen`)
	// Storage: `Xyk::LiquidityAssets` (r:2 w:0)
	// Proof: `Xyk::LiquidityAssets` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	// Storage: `Tokens::TotalIssuance` (r:1 w:0)
	// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	// Storage: `Xyk::Pools` (r:4 w:1)
	// Proof: `Xyk::Pools` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:6 w:6)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:2 w:2)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	fn buy_asset() -> Weight {
		(Weight::from_parts(235_869_000, 0))
			.saturating_add(RocksDbWeight::get().reads(18 as u64))
			.saturating_add(RocksDbWeight::get().writes(9 as u64))
	}
	// Storage: `Maintenance::MaintenanceStatus` (r:1 w:0)
	// Proof: `Maintenance::MaintenanceStatus` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	// Storage: `AssetRegistry::Metadata` (r:100 w:0)
	// Proof: `AssetRegistry::Metadata` (`max_values`: None, `max_size`: Some(756), added: 3231, mode: `MaxEncodedLen`)
	// Storage: `Xyk::LiquidityAssets` (r:99 w:0)
	// Proof: `Xyk::LiquidityAssets` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	// Storage: `Tokens::TotalIssuance` (r:100 w:1)
	// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	// Storage: `Xyk::Pools` (r:297 w:198)
	// Proof: `Xyk::Pools` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:400 w:400)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:2 w:2)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	fn multiswap_buy_asset(x: u32, ) -> Weight {
		(Weight::from_parts(651_260_000, 0))
			// Standard Error: 536_937
			.saturating_add((Weight::from_parts(287_282_771, 0)).saturating_mul(x as u64))
			.saturating_add(RocksDbWeight::get().reads(29 as u64))
			.saturating_add(RocksDbWeight::get().reads((10 as u64).saturating_mul(x as u64)))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
			.saturating_add(RocksDbWeight::get().writes((6 as u64).saturating_mul(x as u64)))
	}
	// Storage: `AssetRegistry::Metadata` (r:2 w:0)
	// Proof: `AssetRegistry::Metadata` (`max_values`: None, `max_size`: Some(756), added: 3231, mode: `MaxEncodedLen`)
	// Storage: `Xyk::LiquidityAssets` (r:1 w:0)
	// Proof: `Xyk::LiquidityAssets` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	// Storage: `Xyk::Pools` (r:1 w:1)
	// Proof: `Xyk::Pools` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	// Storage: `Tokens::TotalIssuance` (r:1 w:1)
	// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:5 w:5)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `Tokens::NextCurrencyId` (r:1 w:0)
	// Proof: `Tokens::NextCurrencyId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	// Storage: `ProofOfStake::PromotedPoolRewards` (r:1 w:0)
	// Proof: `ProofOfStake::PromotedPoolRewards` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:1 w:1)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(124), added: 2599, mode: `MaxEncodedLen`)
	// Storage: `ProofOfStake::RewardsInfo` (r:1 w:1)
	// Proof: `ProofOfStake::RewardsInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ProofOfStake::TotalActivatedLiquidity` (r:1 w:1)
	// Proof: `ProofOfStake::TotalActivatedLiquidity` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn mint_liquidity() -> Weight {
		(Weight::from_parts(224_910_000, 0))
			.saturating_add(RocksDbWeight::get().reads(15 as u64))
			.saturating_add(RocksDbWeight::get().writes(10 as u64))
	}
	// Storage: `Xyk::LiquidityAssets` (r:1 w:0)
	// Proof: `Xyk::LiquidityAssets` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	// Storage: `ProofOfStake::PromotedPoolRewards` (r:1 w:0)
	// Proof: `ProofOfStake::PromotedPoolRewards` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Vesting::Vesting` (r:2 w:2)
	// Proof: `Vesting::Vesting` (`max_values`: None, `max_size`: Some(1869), added: 4344, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Locks` (r:2 w:2)
	// Proof: `Tokens::Locks` (`max_values`: None, `max_size`: Some(1261), added: 3736, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:5 w:5)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `Xyk::Pools` (r:1 w:1)
	// Proof: `Xyk::Pools` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	// Storage: `Tokens::TotalIssuance` (r:1 w:1)
	// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	// Storage: `Tokens::NextCurrencyId` (r:1 w:0)
	// Proof: `Tokens::NextCurrencyId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn mint_liquidity_using_vesting_native_tokens() -> Weight {
		(Weight::from_parts(277_789_000, 0))
			.saturating_add(RocksDbWeight::get().reads(14 as u64))
			.saturating_add(RocksDbWeight::get().writes(11 as u64))
	}
	// Storage: `AssetRegistry::Metadata` (r:2 w:0)
	// Proof: `AssetRegistry::Metadata` (`max_values`: None, `max_size`: Some(756), added: 3231, mode: `MaxEncodedLen`)
	// Storage: `Xyk::LiquidityAssets` (r:1 w:0)
	// Proof: `Xyk::LiquidityAssets` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:1 w:1)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(124), added: 2599, mode: `MaxEncodedLen`)
	// Storage: `Xyk::Pools` (r:1 w:1)
	// Proof: `Xyk::Pools` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:5 w:5)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `ProofOfStake::PromotedPoolRewards` (r:1 w:0)
	// Proof: `ProofOfStake::PromotedPoolRewards` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ProofOfStake::RewardsInfo` (r:1 w:1)
	// Proof: `ProofOfStake::RewardsInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ProofOfStake::ActivatedNativeRewardsLiq` (r:1 w:0)
	// Proof: `ProofOfStake::ActivatedNativeRewardsLiq` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ProofOfStake::TotalActivatedLiquidity` (r:1 w:1)
	// Proof: `ProofOfStake::TotalActivatedLiquidity` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Tokens::TotalIssuance` (r:1 w:1)
	// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	fn burn_liquidity() -> Weight {
		(Weight::from_parts(206_760_000, 0))
			.saturating_add(RocksDbWeight::get().reads(15 as u64))
			.saturating_add(RocksDbWeight::get().writes(10 as u64))
	}
	// Storage: `Xyk::LiquidityPools` (r:1 w:0)
	// Proof: `Xyk::LiquidityPools` (`max_values`: None, `max_size`: Some(41), added: 2516, mode: `MaxEncodedLen`)
	// Storage: `AssetRegistry::Metadata` (r:2 w:0)
	// Proof: `AssetRegistry::Metadata` (`max_values`: None, `max_size`: Some(756), added: 3231, mode: `MaxEncodedLen`)
	// Storage: `Xyk::LiquidityAssets` (r:2 w:0)
	// Proof: `Xyk::LiquidityAssets` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	// Storage: `Tokens::TotalIssuance` (r:1 w:1)
	// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	// Storage: `Xyk::Pools` (r:4 w:1)
	// Proof: `Xyk::Pools` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:7 w:7)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `Maintenance::MaintenanceStatus` (r:1 w:0)
	// Proof: `Maintenance::MaintenanceStatus` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:2 w:2)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	// Storage: `Tokens::NextCurrencyId` (r:1 w:0)
	// Proof: `Tokens::NextCurrencyId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	// Storage: `ProofOfStake::PromotedPoolRewards` (r:1 w:0)
	// Proof: `ProofOfStake::PromotedPoolRewards` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn provide_liquidity_with_conversion() -> Weight {
		(Weight::from_parts(365_410_000, 0))
			.saturating_add(RocksDbWeight::get().reads(22 as u64))
			.saturating_add(RocksDbWeight::get().writes(11 as u64))
	}
	// Storage: `Xyk::LiquidityPools` (r:1 w:0)
	// Proof: `Xyk::LiquidityPools` (`max_values`: None, `max_size`: Some(41), added: 2516, mode: `MaxEncodedLen`)
	// Storage: `AssetRegistry::Metadata` (r:2 w:0)
	// Proof: `AssetRegistry::Metadata` (`max_values`: None, `max_size`: Some(756), added: 3231, mode: `MaxEncodedLen`)
	// Storage: `ProofOfStake::PromotedPoolRewards` (r:1 w:0)
	// Proof: `ProofOfStake::PromotedPoolRewards` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ProofOfStake::RewardsInfo` (r:1 w:1)
	// Proof: `ProofOfStake::RewardsInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Tokens::Accounts` (r:8 w:8)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `Xyk::LiquidityAssets` (r:2 w:0)
	// Proof: `Xyk::LiquidityAssets` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	// Storage: `Tokens::TotalIssuance` (r:2 w:2)
	// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	// Storage: `Xyk::Pools` (r:2 w:1)
	// Proof: `Xyk::Pools` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	// Storage: `Maintenance::MaintenanceStatus` (r:1 w:0)
	// Proof: `Maintenance::MaintenanceStatus` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:2 w:2)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	// Storage: `Tokens::NextCurrencyId` (r:1 w:0)
	// Proof: `Tokens::NextCurrencyId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:1 w:1)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(124), added: 2599, mode: `MaxEncodedLen`)
	// Storage: `ProofOfStake::TotalActivatedLiquidity` (r:1 w:1)
	// Proof: `ProofOfStake::TotalActivatedLiquidity` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn compound_rewards() -> Weight {
		(Weight::from_parts(557_650_000, 0))
			.saturating_add(RocksDbWeight::get().reads(25 as u64))
			.saturating_add(RocksDbWeight::get().writes(16 as u64))
	}
}
