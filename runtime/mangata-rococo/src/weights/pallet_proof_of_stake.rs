// This file is part of Mangata.

// Copyright (C) 2020-2022 Mangata Foundation.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_xyk
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-06, STEPS: `2`, REPEAT: 2, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("kusama-local"), DB CACHE: 1024

// Executed Command:
// /hdd/work/mangata-ws/mangata-node/scripts/..//target/release/mangata-node
// benchmark
// pallet
// --chain
// kusama-local
// --execution
// wasm
// --wasm-execution
// compiled
// --pallet
// pallet_xyk
// --extrinsic
// *
// --steps
// 2
// --repeat
// 2
// --output
// ./benchmarks/crate::weights::pallet_xyk_weights.rs
// --template
// ./templates/module-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;
use pallet_xyk::WeightInfo as XykWeightInfo;

/// Weight functions needed for pallet_xyk.
pub trait WeightInfo {
	fn claim_rewards_v2() -> Weight;
	fn claim_rewards_all_v2() -> Weight;
	fn update_pool_promotion() -> Weight;
	fn activate_liquidity_v2() -> Weight;
	fn deactivate_liquidity_v2() -> Weight;
	fn proof_of_stake_compound_rewards() -> Weight;
}

/// Weights for pallet_xyk using the Mangata node and recommended hardware.
pub struct ModuleWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_proof_of_stake::WeightInfo for ModuleWeight<T> {
	// Storage: ProofOfStake RewardsInfo (r:1 w:1)
	// Storage: Issuance PromotedPoolsRewardsV2 (r:1 w:0)
	// Storage: Tokens Accounts (r:2 w:2)
	fn claim_rewards_v2() -> Weight {
		crate::weights::pallet_xyk_weights::ModuleWeight::<T>::claim_rewards_v2()
	}
	// Storage: ProofOfStake RewardsInfo (r:1 w:1)
	// Storage: Issuance PromotedPoolsRewardsV2 (r:1 w:0)
	// Storage: Tokens Accounts (r:2 w:2)
	fn claim_rewards_all_v2() -> Weight {
		crate::weights::pallet_xyk_weights::ModuleWeight::<T>::claim_rewards_all_v2()
	}
	// Storage: Issuance PromotedPoolsRewardsV2 (r:1 w:1)
	fn update_pool_promotion() -> Weight {
		crate::weights::pallet_xyk_weights::ModuleWeight::<T>::update_pool_promotion()
	}
	// Storage: Issuance PromotedPoolsRewardsV2 (r:1 w:0)
	// Storage: MultiPurposeLiquidity ReserveStatus (r:1 w:1)
	// Storage: Tokens Accounts (r:1 w:1)
	// Storage: ProofOfStake RewardsInfo (r:1 w:1)
	// Storage: ProofOfStake LiquidityMiningActivePoolV2 (r:1 w:1)
	fn activate_liquidity_v2() -> Weight {
		crate::weights::pallet_xyk_weights::ModuleWeight::<T>::activate_liquidity_v2()
	}
	// Storage: Issuance PromotedPoolsRewardsV2 (r:1 w:0)
	// Storage: ProofOfStake RewardsInfo (r:1 w:1)
	// Storage: ProofOfStake LiquidityMiningActivePoolV2 (r:1 w:1)
	// Storage: MultiPurposeLiquidity ReserveStatus (r:1 w:1)
	// Storage: Tokens Accounts (r:1 w:1)
	fn deactivate_liquidity_v2() -> Weight {
		crate::weights::pallet_xyk_weights::ModuleWeight::<T>::deactivate_liquidity_v2()
	}
	// Storage: Xyk LiquidityPools (r:1 w:0)
	// Storage: AssetRegistry Metadata (r:2 w:0)
	// Storage: ProofOfStake RewardsInfo (r:1 w:1)
	// Storage: Issuance PromotedPoolsRewardsV2 (r:1 w:0)
	// Storage: Tokens Accounts (r:8 w:8)
	// Storage: Xyk Pools (r:2 w:1)
	// Storage: Maintenance MaintenanceStatus (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens TotalIssuance (r:2 w:2)
	// Storage: Xyk LiquidityAssets (r:2 w:0)
	// Storage: Tokens NextCurrencyId (r:1 w:0)
	// Storage: ProofOfStake LiquidityMiningActivePoolV2 (r:1 w:1)
	// Storage: MultiPurposeLiquidity ReserveStatus (r:1 w:1)
	fn proof_of_stake_compound_rewards() -> Weight {
		crate::weights::pallet_xyk_weights::ModuleWeight::<T>::proof_of_stake_compound_rewards()
	}
}
