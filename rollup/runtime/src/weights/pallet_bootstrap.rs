// This file is part of Mangata.

// Copyright (C) 2020-2022 Mangata Foundation.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_bootstrap
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-01-09, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("mangata-kusama"), DB CACHE: 1024

// Executed Command:
// target/release/mangata-node
// benchmark
// pallet
// -l=info,runtime::collective=warn,xyk=warn
// --chain
// mangata-kusama
// --execution
// wasm
// --wasm-execution
// compiled
// --pallet
// *
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --template
// ./templates/module-weight-template.hbs
// --output
// ./benchmarks/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_bootstrap.
pub trait WeightInfo {
	fn schedule_bootstrap() -> Weight;
	fn provision() -> Weight;
	fn claim_and_activate_liquidity_tokens() -> Weight;
	fn finalize() -> Weight;
}

/// Weights for pallet_bootstrap using the Mangata node and recommended hardware.
pub struct ModuleWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_bootstrap::WeightInfo for ModuleWeight<T> {
	// Storage: `Bootstrap::Phase` (r:1 w:0)
	// Proof: `Bootstrap::Phase` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Bootstrap::BootstrapSchedule` (r:1 w:1)
	// Proof: `Bootstrap::BootstrapSchedule` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Tokens::NextCurrencyId` (r:1 w:0)
	// Proof: `Tokens::NextCurrencyId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	// Storage: `Xyk::Pools` (r:2 w:0)
	// Proof: `Xyk::Pools` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	// Storage: `Bootstrap::PromoteBootstrapPool` (r:0 w:1)
	// Proof: `Bootstrap::PromoteBootstrapPool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Bootstrap::ActivePair` (r:0 w:1)
	// Proof: `Bootstrap::ActivePair` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn schedule_bootstrap() -> Weight {
		(Weight::from_parts(31_320_000, 0))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: `Maintenance::MaintenanceStatus` (r:1 w:0)
	// Proof: `Maintenance::MaintenanceStatus` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	// Storage: `Bootstrap::ActivePair` (r:1 w:0)
	// Proof: `Bootstrap::ActivePair` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Bootstrap::Phase` (r:1 w:0)
	// Proof: `Bootstrap::Phase` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Bootstrap::WhitelistedAccount` (r:1 w:0)
	// Proof: `Bootstrap::WhitelistedAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Bootstrap::BootstrapSchedule` (r:1 w:0)
	// Proof: `Bootstrap::BootstrapSchedule` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Tokens::Accounts` (r:2 w:2)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:1 w:1)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	// Storage: `Bootstrap::Provisions` (r:1 w:1)
	// Proof: `Bootstrap::Provisions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Bootstrap::Valuations` (r:1 w:1)
	// Proof: `Bootstrap::Valuations` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Bootstrap::ProvisionAccounts` (r:0 w:1)
	// Proof: `Bootstrap::ProvisionAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn provision() -> Weight {
		(Weight::from_parts(95_910_000, 0))
			.saturating_add(T::DbWeight::get().reads(10 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: `Bootstrap::Phase` (r:1 w:0)
	// Proof: `Bootstrap::Phase` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Bootstrap::MintedLiquidity` (r:1 w:0)
	// Proof: `Bootstrap::MintedLiquidity` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Bootstrap::ArchivedBootstrap` (r:1 w:0)
	// Proof: `Bootstrap::ArchivedBootstrap` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Bootstrap::ActivePair` (r:1 w:0)
	// Proof: `Bootstrap::ActivePair` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Bootstrap::ClaimedRewards` (r:2 w:2)
	// Proof: `Bootstrap::ClaimedRewards` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Bootstrap::Valuations` (r:1 w:0)
	// Proof: `Bootstrap::Valuations` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Bootstrap::Provisions` (r:2 w:0)
	// Proof: `Bootstrap::Provisions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Bootstrap::VestedProvisions` (r:2 w:0)
	// Proof: `Bootstrap::VestedProvisions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Tokens::Accounts` (r:2 w:2)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `ProofOfStake::PromotedPoolRewards` (r:1 w:0)
	// Proof: `ProofOfStake::PromotedPoolRewards` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:1 w:1)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(124), added: 2599, mode: `MaxEncodedLen`)
	// Storage: `ProofOfStake::RewardsInfo` (r:1 w:1)
	// Proof: `ProofOfStake::RewardsInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ProofOfStake::TotalActivatedLiquidity` (r:1 w:1)
	// Proof: `ProofOfStake::TotalActivatedLiquidity` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Bootstrap::ProvisionAccounts` (r:0 w:1)
	// Proof: `Bootstrap::ProvisionAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn claim_and_activate_liquidity_tokens() -> Weight {
		(Weight::from_parts(221_220_000, 0))
			.saturating_add(T::DbWeight::get().reads(17 as u64))
			.saturating_add(T::DbWeight::get().writes(8 as u64))
	}
	// Storage: `Bootstrap::Phase` (r:1 w:1)
	// Proof: `Bootstrap::Phase` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Bootstrap::ProvisionAccounts` (r:1 w:0)
	// Proof: `Bootstrap::ProvisionAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Bootstrap::VestedProvisions` (r:1 w:0)
	// Proof: `Bootstrap::VestedProvisions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Bootstrap::WhitelistedAccount` (r:1 w:0)
	// Proof: `Bootstrap::WhitelistedAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Bootstrap::ClaimedRewards` (r:1 w:0)
	// Proof: `Bootstrap::ClaimedRewards` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Bootstrap::Provisions` (r:1 w:0)
	// Proof: `Bootstrap::Provisions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Bootstrap::MintedLiquidity` (r:1 w:1)
	// Proof: `Bootstrap::MintedLiquidity` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Tokens::Accounts` (r:1 w:0)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `Bootstrap::BootstrapSchedule` (r:1 w:1)
	// Proof: `Bootstrap::BootstrapSchedule` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Bootstrap::ArchivedBootstrap` (r:1 w:1)
	// Proof: `Bootstrap::ArchivedBootstrap` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Bootstrap::Valuations` (r:0 w:1)
	// Proof: `Bootstrap::Valuations` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Bootstrap::PromoteBootstrapPool` (r:0 w:1)
	// Proof: `Bootstrap::PromoteBootstrapPool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Bootstrap::ActivePair` (r:0 w:1)
	// Proof: `Bootstrap::ActivePair` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn finalize() -> Weight {
		(Weight::from_parts(73_640_000, 0))
			.saturating_add(T::DbWeight::get().reads(10 as u64))
			.saturating_add(T::DbWeight::get().writes(7 as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: `Bootstrap::Phase` (r:1 w:0)
	// Proof: `Bootstrap::Phase` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Bootstrap::BootstrapSchedule` (r:1 w:1)
	// Proof: `Bootstrap::BootstrapSchedule` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Tokens::NextCurrencyId` (r:1 w:0)
	// Proof: `Tokens::NextCurrencyId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	// Storage: `Xyk::Pools` (r:2 w:0)
	// Proof: `Xyk::Pools` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	// Storage: `Bootstrap::PromoteBootstrapPool` (r:0 w:1)
	// Proof: `Bootstrap::PromoteBootstrapPool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Bootstrap::ActivePair` (r:0 w:1)
	// Proof: `Bootstrap::ActivePair` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn schedule_bootstrap() -> Weight {
		(Weight::from_parts(31_320_000, 0))
			.saturating_add(RocksDbWeight::get().reads(5 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: `Maintenance::MaintenanceStatus` (r:1 w:0)
	// Proof: `Maintenance::MaintenanceStatus` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	// Storage: `Bootstrap::ActivePair` (r:1 w:0)
	// Proof: `Bootstrap::ActivePair` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Bootstrap::Phase` (r:1 w:0)
	// Proof: `Bootstrap::Phase` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Bootstrap::WhitelistedAccount` (r:1 w:0)
	// Proof: `Bootstrap::WhitelistedAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Bootstrap::BootstrapSchedule` (r:1 w:0)
	// Proof: `Bootstrap::BootstrapSchedule` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Tokens::Accounts` (r:2 w:2)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:1 w:1)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	// Storage: `Bootstrap::Provisions` (r:1 w:1)
	// Proof: `Bootstrap::Provisions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Bootstrap::Valuations` (r:1 w:1)
	// Proof: `Bootstrap::Valuations` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Bootstrap::ProvisionAccounts` (r:0 w:1)
	// Proof: `Bootstrap::ProvisionAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn provision() -> Weight {
		(Weight::from_parts(95_910_000, 0))
			.saturating_add(RocksDbWeight::get().reads(10 as u64))
			.saturating_add(RocksDbWeight::get().writes(6 as u64))
	}
	// Storage: `Bootstrap::Phase` (r:1 w:0)
	// Proof: `Bootstrap::Phase` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Bootstrap::MintedLiquidity` (r:1 w:0)
	// Proof: `Bootstrap::MintedLiquidity` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Bootstrap::ArchivedBootstrap` (r:1 w:0)
	// Proof: `Bootstrap::ArchivedBootstrap` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Bootstrap::ActivePair` (r:1 w:0)
	// Proof: `Bootstrap::ActivePair` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Bootstrap::ClaimedRewards` (r:2 w:2)
	// Proof: `Bootstrap::ClaimedRewards` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Bootstrap::Valuations` (r:1 w:0)
	// Proof: `Bootstrap::Valuations` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Bootstrap::Provisions` (r:2 w:0)
	// Proof: `Bootstrap::Provisions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Bootstrap::VestedProvisions` (r:2 w:0)
	// Proof: `Bootstrap::VestedProvisions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Tokens::Accounts` (r:2 w:2)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `ProofOfStake::PromotedPoolRewards` (r:1 w:0)
	// Proof: `ProofOfStake::PromotedPoolRewards` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:1 w:1)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(124), added: 2599, mode: `MaxEncodedLen`)
	// Storage: `ProofOfStake::RewardsInfo` (r:1 w:1)
	// Proof: `ProofOfStake::RewardsInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ProofOfStake::TotalActivatedLiquidity` (r:1 w:1)
	// Proof: `ProofOfStake::TotalActivatedLiquidity` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Bootstrap::ProvisionAccounts` (r:0 w:1)
	// Proof: `Bootstrap::ProvisionAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn claim_and_activate_liquidity_tokens() -> Weight {
		(Weight::from_parts(221_220_000, 0))
			.saturating_add(RocksDbWeight::get().reads(17 as u64))
			.saturating_add(RocksDbWeight::get().writes(8 as u64))
	}
	// Storage: `Bootstrap::Phase` (r:1 w:1)
	// Proof: `Bootstrap::Phase` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Bootstrap::ProvisionAccounts` (r:1 w:0)
	// Proof: `Bootstrap::ProvisionAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Bootstrap::VestedProvisions` (r:1 w:0)
	// Proof: `Bootstrap::VestedProvisions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Bootstrap::WhitelistedAccount` (r:1 w:0)
	// Proof: `Bootstrap::WhitelistedAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Bootstrap::ClaimedRewards` (r:1 w:0)
	// Proof: `Bootstrap::ClaimedRewards` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Bootstrap::Provisions` (r:1 w:0)
	// Proof: `Bootstrap::Provisions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Bootstrap::MintedLiquidity` (r:1 w:1)
	// Proof: `Bootstrap::MintedLiquidity` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Tokens::Accounts` (r:1 w:0)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `Bootstrap::BootstrapSchedule` (r:1 w:1)
	// Proof: `Bootstrap::BootstrapSchedule` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Bootstrap::ArchivedBootstrap` (r:1 w:1)
	// Proof: `Bootstrap::ArchivedBootstrap` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Bootstrap::Valuations` (r:0 w:1)
	// Proof: `Bootstrap::Valuations` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Bootstrap::PromoteBootstrapPool` (r:0 w:1)
	// Proof: `Bootstrap::PromoteBootstrapPool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Bootstrap::ActivePair` (r:0 w:1)
	// Proof: `Bootstrap::ActivePair` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn finalize() -> Weight {
		(Weight::from_parts(73_640_000, 0))
			.saturating_add(RocksDbWeight::get().reads(10 as u64))
			.saturating_add(RocksDbWeight::get().writes(7 as u64))
	}
}
