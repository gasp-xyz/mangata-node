// This file is part of Mangata.

// Copyright (C) 2020-2022 Mangata Foundation.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_collective_mangata
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-02-02, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/release/mangata-node
// benchmark
// pallet
// -l=info,xyk=error,collective-mangata=warn,bootstrap=warn
// --chain
// dev
// --execution
// wasm
// --wasm-execution
// compiled
// --pallet
// *
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --template
// ./templates/module-weight-template.hbs
// --output
// ./benchmarks/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_collective_mangata.
pub trait WeightInfo {
	fn set_members(m: u32, n: u32, p: u32, ) -> Weight;
	fn execute(b: u32, m: u32, ) -> Weight;
	fn propose_execute(b: u32, m: u32, ) -> Weight;
	fn propose_proposed(b: u32, m: u32, p: u32, ) -> Weight;
	fn vote(m: u32, ) -> Weight;
	fn close_early_disapproved(m: u32, p: u32, ) -> Weight;
	fn close_early_approved(b: u32, m: u32, p: u32, ) -> Weight;
	fn close_disapproved(m: u32, p: u32, ) -> Weight;
	fn close_approved(b: u32, m: u32, p: u32, ) -> Weight;
	fn disapprove_proposal(p: u32, ) -> Weight;
}

/// Weights for pallet_collective_mangata using the Mangata node and recommended hardware.
pub struct ModuleWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_collective_mangata::WeightInfo for ModuleWeight<T> {
	// Storage: Council Members (r:1 w:1)
	// Storage: Council Proposals (r:1 w:0)
	// Storage: Council Voting (r:100 w:100)
	// Storage: Council Prime (r:0 w:1)
	fn set_members(m: u32, _n: u32, p: u32, ) -> Weight {
		(Weight::from_ref_time(88_631_000))
			// Standard Error: 58_027
			.saturating_add((Weight::from_ref_time(4_608_485)).saturating_mul(m as u64))
			// Standard Error: 58_027
			.saturating_add((Weight::from_ref_time(8_782_129)).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(p as u64)))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(p as u64)))
	}
	// Storage: Council Members (r:1 w:0)
	fn execute(b: u32, m: u32, ) -> Weight {
		(Weight::from_ref_time(34_086_450))
			// Standard Error: 71
			.saturating_add((Weight::from_ref_time(1_945)).saturating_mul(b as u64))
			// Standard Error: 733
			.saturating_add((Weight::from_ref_time(23_288)).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: Council Members (r:1 w:0)
	// Storage: Council ProposalOf (r:1 w:0)
	fn propose_execute(b: u32, m: u32, ) -> Weight {
		(Weight::from_ref_time(36_939_473))
			// Standard Error: 86
			.saturating_add((Weight::from_ref_time(2_553)).saturating_mul(b as u64))
			// Standard Error: 890
			.saturating_add((Weight::from_ref_time(38_008)).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
	}
	// Storage: Council Members (r:1 w:0)
	// Storage: Council ProposalOf (r:1 w:1)
	// Storage: Council Proposals (r:1 w:1)
	// Storage: Council ProposalCount (r:1 w:1)
	// Storage: Council ProposalProposedTime (r:0 w:1)
	// Storage: Council Voting (r:0 w:1)
	fn propose_proposed(b: u32, m: u32, p: u32, ) -> Weight {
		(Weight::from_ref_time(48_501_645))
			// Standard Error: 164
			.saturating_add((Weight::from_ref_time(5_017)).saturating_mul(b as u64))
			// Standard Error: 1_720
			.saturating_add((Weight::from_ref_time(32_768)).saturating_mul(m as u64))
			// Standard Error: 1_698
			.saturating_add((Weight::from_ref_time(258_823)).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: Council Members (r:1 w:0)
	// Storage: Council Voting (r:1 w:1)
	fn vote(m: u32, ) -> Weight {
		(Weight::from_ref_time(51_041_161))
			// Standard Error: 1_215
			.saturating_add((Weight::from_ref_time(54_775)).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Council Voting (r:1 w:1)
	// Storage: Council ProposalProposedTime (r:1 w:1)
	// Storage: Council Members (r:1 w:0)
	// Storage: Council Proposals (r:1 w:1)
	// Storage: Council ProposalOf (r:0 w:1)
	fn close_early_disapproved(m: u32, p: u32, ) -> Weight {
		(Weight::from_ref_time(66_550_265))
			// Standard Error: 1_703
			.saturating_add((Weight::from_ref_time(42_075)).saturating_mul(m as u64))
			// Standard Error: 1_661
			.saturating_add((Weight::from_ref_time(236_550)).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: Council Voting (r:1 w:1)
	// Storage: Council ProposalProposedTime (r:1 w:1)
	// Storage: Council Members (r:1 w:0)
	// Storage: Council ProposalOf (r:1 w:1)
	// Storage: Council Proposals (r:1 w:1)
	fn close_early_approved(b: u32, m: u32, p: u32, ) -> Weight {
		(Weight::from_ref_time(86_838_348))
			// Standard Error: 193
			.saturating_add((Weight::from_ref_time(3_337)).saturating_mul(b as u64))
			// Standard Error: 2_046
			.saturating_add((Weight::from_ref_time(50_346)).saturating_mul(m as u64))
			// Standard Error: 1_994
			.saturating_add((Weight::from_ref_time(260_571)).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: Council Voting (r:1 w:1)
	// Storage: Council ProposalProposedTime (r:1 w:1)
	// Storage: Council Members (r:1 w:0)
	// Storage: Council Prime (r:1 w:0)
	// Storage: Council Proposals (r:1 w:1)
	// Storage: Council ProposalOf (r:0 w:1)
	fn close_disapproved(m: u32, p: u32, ) -> Weight {
		(Weight::from_ref_time(70_022_144))
			// Standard Error: 1_691
			.saturating_add((Weight::from_ref_time(49_136)).saturating_mul(m as u64))
			// Standard Error: 1_649
			.saturating_add((Weight::from_ref_time(241_195)).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: Council Voting (r:1 w:1)
	// Storage: Council ProposalProposedTime (r:1 w:1)
	// Storage: Council Members (r:1 w:0)
	// Storage: Council Prime (r:1 w:0)
	// Storage: Council ProposalOf (r:1 w:1)
	// Storage: Council Proposals (r:1 w:1)
	fn close_approved(b: u32, m: u32, p: u32, ) -> Weight {
		(Weight::from_ref_time(91_516_798))
			// Standard Error: 200
			.saturating_add((Weight::from_ref_time(2_676)).saturating_mul(b as u64))
			// Standard Error: 2_121
			.saturating_add((Weight::from_ref_time(52_283)).saturating_mul(m as u64))
			// Standard Error: 2_067
			.saturating_add((Weight::from_ref_time(257_338)).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: Council Proposals (r:1 w:1)
	// Storage: Council ProposalProposedTime (r:0 w:1)
	// Storage: Council Voting (r:0 w:1)
	// Storage: Council ProposalOf (r:0 w:1)
	fn disapprove_proposal(p: u32, ) -> Weight {
		(Weight::from_ref_time(41_063_493))
			// Standard Error: 1_621
			.saturating_add((Weight::from_ref_time(236_761)).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Council Members (r:1 w:1)
	// Storage: Council Proposals (r:1 w:0)
	// Storage: Council Voting (r:100 w:100)
	// Storage: Council Prime (r:0 w:1)
	fn set_members(m: u32, _n: u32, p: u32, ) -> Weight {
		(Weight::from_ref_time(88_631_000))
			// Standard Error: 58_027
			.saturating_add((Weight::from_ref_time(4_608_485)).saturating_mul(m as u64))
			// Standard Error: 58_027
			.saturating_add((Weight::from_ref_time(8_782_129)).saturating_mul(p as u64))
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(p as u64)))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
			.saturating_add(RocksDbWeight::get().writes((1 as u64).saturating_mul(p as u64)))
	}
	// Storage: Council Members (r:1 w:0)
	fn execute(b: u32, m: u32, ) -> Weight {
		(Weight::from_ref_time(34_086_450))
			// Standard Error: 71
			.saturating_add((Weight::from_ref_time(1_945)).saturating_mul(b as u64))
			// Standard Error: 733
			.saturating_add((Weight::from_ref_time(23_288)).saturating_mul(m as u64))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
	}
	// Storage: Council Members (r:1 w:0)
	// Storage: Council ProposalOf (r:1 w:0)
	fn propose_execute(b: u32, m: u32, ) -> Weight {
		(Weight::from_ref_time(36_939_473))
			// Standard Error: 86
			.saturating_add((Weight::from_ref_time(2_553)).saturating_mul(b as u64))
			// Standard Error: 890
			.saturating_add((Weight::from_ref_time(38_008)).saturating_mul(m as u64))
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
	}
	// Storage: Council Members (r:1 w:0)
	// Storage: Council ProposalOf (r:1 w:1)
	// Storage: Council Proposals (r:1 w:1)
	// Storage: Council ProposalCount (r:1 w:1)
	// Storage: Council ProposalProposedTime (r:0 w:1)
	// Storage: Council Voting (r:0 w:1)
	fn propose_proposed(b: u32, m: u32, p: u32, ) -> Weight {
		(Weight::from_ref_time(48_501_645))
			// Standard Error: 164
			.saturating_add((Weight::from_ref_time(5_017)).saturating_mul(b as u64))
			// Standard Error: 1_720
			.saturating_add((Weight::from_ref_time(32_768)).saturating_mul(m as u64))
			// Standard Error: 1_698
			.saturating_add((Weight::from_ref_time(258_823)).saturating_mul(p as u64))
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().writes(5 as u64))
	}
	// Storage: Council Members (r:1 w:0)
	// Storage: Council Voting (r:1 w:1)
	fn vote(m: u32, ) -> Weight {
		(Weight::from_ref_time(51_041_161))
			// Standard Error: 1_215
			.saturating_add((Weight::from_ref_time(54_775)).saturating_mul(m as u64))
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Council Voting (r:1 w:1)
	// Storage: Council ProposalProposedTime (r:1 w:1)
	// Storage: Council Members (r:1 w:0)
	// Storage: Council Proposals (r:1 w:1)
	// Storage: Council ProposalOf (r:0 w:1)
	fn close_early_disapproved(m: u32, p: u32, ) -> Weight {
		(Weight::from_ref_time(66_550_265))
			// Standard Error: 1_703
			.saturating_add((Weight::from_ref_time(42_075)).saturating_mul(m as u64))
			// Standard Error: 1_661
			.saturating_add((Weight::from_ref_time(236_550)).saturating_mul(p as u64))
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
	// Storage: Council Voting (r:1 w:1)
	// Storage: Council ProposalProposedTime (r:1 w:1)
	// Storage: Council Members (r:1 w:0)
	// Storage: Council ProposalOf (r:1 w:1)
	// Storage: Council Proposals (r:1 w:1)
	fn close_early_approved(b: u32, m: u32, p: u32, ) -> Weight {
		(Weight::from_ref_time(86_838_348))
			// Standard Error: 193
			.saturating_add((Weight::from_ref_time(3_337)).saturating_mul(b as u64))
			// Standard Error: 2_046
			.saturating_add((Weight::from_ref_time(50_346)).saturating_mul(m as u64))
			// Standard Error: 1_994
			.saturating_add((Weight::from_ref_time(260_571)).saturating_mul(p as u64))
			.saturating_add(RocksDbWeight::get().reads(5 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
	// Storage: Council Voting (r:1 w:1)
	// Storage: Council ProposalProposedTime (r:1 w:1)
	// Storage: Council Members (r:1 w:0)
	// Storage: Council Prime (r:1 w:0)
	// Storage: Council Proposals (r:1 w:1)
	// Storage: Council ProposalOf (r:0 w:1)
	fn close_disapproved(m: u32, p: u32, ) -> Weight {
		(Weight::from_ref_time(70_022_144))
			// Standard Error: 1_691
			.saturating_add((Weight::from_ref_time(49_136)).saturating_mul(m as u64))
			// Standard Error: 1_649
			.saturating_add((Weight::from_ref_time(241_195)).saturating_mul(p as u64))
			.saturating_add(RocksDbWeight::get().reads(5 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
	// Storage: Council Voting (r:1 w:1)
	// Storage: Council ProposalProposedTime (r:1 w:1)
	// Storage: Council Members (r:1 w:0)
	// Storage: Council Prime (r:1 w:0)
	// Storage: Council ProposalOf (r:1 w:1)
	// Storage: Council Proposals (r:1 w:1)
	fn close_approved(b: u32, m: u32, p: u32, ) -> Weight {
		(Weight::from_ref_time(91_516_798))
			// Standard Error: 200
			.saturating_add((Weight::from_ref_time(2_676)).saturating_mul(b as u64))
			// Standard Error: 2_121
			.saturating_add((Weight::from_ref_time(52_283)).saturating_mul(m as u64))
			// Standard Error: 2_067
			.saturating_add((Weight::from_ref_time(257_338)).saturating_mul(p as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
	// Storage: Council Proposals (r:1 w:1)
	// Storage: Council ProposalProposedTime (r:0 w:1)
	// Storage: Council Voting (r:0 w:1)
	// Storage: Council ProposalOf (r:0 w:1)
	fn disapprove_proposal(p: u32, ) -> Weight {
		(Weight::from_ref_time(41_063_493))
			// Standard Error: 1_621
			.saturating_add((Weight::from_ref_time(236_761)).saturating_mul(p as u64))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
}
