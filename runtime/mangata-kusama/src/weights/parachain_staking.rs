// This file is part of Mangata.

// Copyright (C) 2020-2022 Mangata Foundation.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for parachain_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-01-09, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("mangata-kusama"), DB CACHE: 1024

// Executed Command:
// target/release/mangata-node
// benchmark
// pallet
// -l=info,runtime::collective=warn,xyk=warn
// --chain
// mangata-kusama
// --execution
// wasm
// --wasm-execution
// compiled
// --pallet
// *
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --template
// ./templates/module-weight-template.hbs
// --output
// ./benchmarks/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for parachain_staking.
pub trait WeightInfo {
	fn set_total_selected() -> Weight;
	fn set_collator_commission() -> Weight;
	fn join_candidates(x: u32, y: u32, ) -> Weight;
	fn schedule_leave_candidates(x: u32, ) -> Weight;
	fn execute_leave_candidates(x: u32, ) -> Weight;
	fn cancel_leave_candidates(x: u32, ) -> Weight;
	fn go_offline() -> Weight;
	fn go_online() -> Weight;
	fn schedule_candidate_bond_more() -> Weight;
	fn schedule_candidate_bond_less() -> Weight;
	fn execute_candidate_bond_more() -> Weight;
	fn execute_candidate_bond_less() -> Weight;
	fn cancel_candidate_bond_more() -> Weight;
	fn cancel_candidate_bond_less() -> Weight;
	fn delegate(x: u32, y: u32, ) -> Weight;
	fn schedule_leave_delegators() -> Weight;
	fn execute_leave_delegators(x: u32, ) -> Weight;
	fn cancel_leave_delegators() -> Weight;
	fn schedule_revoke_delegation() -> Weight;
	fn schedule_delegator_bond_more() -> Weight;
	fn schedule_delegator_bond_less() -> Weight;
	fn execute_revoke_delegation() -> Weight;
	fn execute_delegator_bond_more() -> Weight;
	fn execute_delegator_bond_less() -> Weight;
	fn cancel_revoke_delegation() -> Weight;
	fn cancel_delegator_bond_more() -> Weight;
	fn cancel_delegator_bond_less() -> Weight;
	fn add_staking_liquidity_token(x: u32, ) -> Weight;
	fn remove_staking_liquidity_token(x: u32, ) -> Weight;
	fn aggregator_update_metadata() -> Weight;
	fn update_candidate_aggregator() -> Weight;
	fn payout_collator_rewards() -> Weight;
	fn payout_delegator_reward() -> Weight;
	fn passive_session_change() -> Weight;
	fn active_session_change(x: u32, y: u32, z: u32, ) -> Weight;
}

/// Weights for parachain_staking using the Mangata node and recommended hardware.
pub struct ModuleWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> parachain_staking::WeightInfo for ModuleWeight<T> {
	// Storage: `ParachainStaking::TotalSelected` (r:1 w:1)
	// Proof: `ParachainStaking::TotalSelected` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_total_selected() -> Weight {
		(Weight::from_parts(18_240_000, 0))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::CollatorCommission` (r:1 w:1)
	// Proof: `ParachainStaking::CollatorCommission` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_collator_commission() -> Weight {
		(Weight::from_parts(18_140_000, 0))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:0)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::AggregatorMetadata` (r:1 w:0)
	// Proof: `ParachainStaking::AggregatorMetadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::StakingLiquidityTokens` (r:1 w:0)
	// Proof: `ParachainStaking::StakingLiquidityTokens` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Xyk::LiquidityPools` (r:1 w:0)
	// Proof: `Xyk::LiquidityPools` (`max_values`: None, `max_size`: Some(41), added: 2516, mode: `MaxEncodedLen`)
	// Storage: `Xyk::Pools` (r:1 w:0)
	// Proof: `Xyk::Pools` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	// Storage: `Tokens::TotalIssuance` (r:1 w:0)
	// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:1 w:1)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(124), added: 2599, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:1)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::Total` (r:1 w:1)
	// Proof: `ParachainStaking::Total` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn join_candidates(x: u32, y: u32, ) -> Weight {
		(Weight::from_parts(117_053_879, 0))
			// Standard Error: 7_446
			.saturating_add((Weight::from_parts(142_269, 0)).saturating_mul(x as u64))
			// Standard Error: 7_356
			.saturating_add((Weight::from_parts(208_459, 0)).saturating_mul(y as u64))
			.saturating_add(T::DbWeight::get().reads(11 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn schedule_leave_candidates(x: u32, ) -> Weight {
		(Weight::from_parts(37_952_996, 0))
			// Standard Error: 2_861
			.saturating_add((Weight::from_parts(97_664, 0)).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:30 w:30)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(124), added: 2599, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:30 w:30)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::DelegatorState` (r:29 w:29)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidateAggregator` (r:1 w:0)
	// Proof: `ParachainStaking::CandidateAggregator` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Total` (r:1 w:1)
	// Proof: `ParachainStaking::Total` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn execute_leave_candidates(x: u32, ) -> Weight {
		(Weight::from_parts(78_861_262, 0))
			// Standard Error: 107_452
			.saturating_add((Weight::from_parts(30_047_808, 0)).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().reads((3 as u64).saturating_mul(x as u64)))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
			.saturating_add(T::DbWeight::get().writes((3 as u64).saturating_mul(x as u64)))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn cancel_leave_candidates(x: u32, ) -> Weight {
		(Weight::from_parts(35_957_664, 0))
			// Standard Error: 2_682
			.saturating_add((Weight::from_parts(90_614, 0)).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn go_offline() -> Weight {
		(Weight::from_parts(34_300_000, 0))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn go_online() -> Weight {
		(Weight::from_parts(34_580_000, 0))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:1 w:0)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(124), added: 2599, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:0)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn schedule_candidate_bond_more() -> Weight {
		(Weight::from_parts(49_480_000, 0))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Xyk::LiquidityPools` (r:1 w:0)
	// Proof: `Xyk::LiquidityPools` (`max_values`: None, `max_size`: Some(41), added: 2516, mode: `MaxEncodedLen`)
	// Storage: `Xyk::Pools` (r:1 w:0)
	// Proof: `Xyk::Pools` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	// Storage: `Tokens::TotalIssuance` (r:1 w:0)
	// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn schedule_candidate_bond_less() -> Weight {
		(Weight::from_parts(52_750_000, 0))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:1 w:1)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(124), added: 2599, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:1)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::Total` (r:1 w:1)
	// Proof: `ParachainStaking::Total` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn execute_candidate_bond_more() -> Weight {
		(Weight::from_parts(94_970_000, 0))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:1 w:1)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(124), added: 2599, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:1)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::Total` (r:1 w:1)
	// Proof: `ParachainStaking::Total` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn execute_candidate_bond_less() -> Weight {
		(Weight::from_parts(101_731_000, 0))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cancel_candidate_bond_more() -> Weight {
		(Weight::from_parts(28_020_000, 0))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cancel_candidate_bond_less() -> Weight {
		(Weight::from_parts(26_969_000, 0))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::AggregatorMetadata` (r:1 w:0)
	// Proof: `ParachainStaking::AggregatorMetadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Xyk::LiquidityPools` (r:1 w:0)
	// Proof: `Xyk::LiquidityPools` (`max_values`: None, `max_size`: Some(41), added: 2516, mode: `MaxEncodedLen`)
	// Storage: `Xyk::Pools` (r:1 w:0)
	// Proof: `Xyk::Pools` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	// Storage: `Tokens::TotalIssuance` (r:1 w:0)
	// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:1 w:1)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(124), added: 2599, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:1)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Total` (r:1 w:1)
	// Proof: `ParachainStaking::Total` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn delegate(x: u32, y: u32, ) -> Weight {
		(Weight::from_parts(119_400_015, 0))
			// Standard Error: 19_692
			.saturating_add((Weight::from_parts(211_488, 0)).saturating_mul(x as u64))
			// Standard Error: 19_029
			.saturating_add((Weight::from_parts(310_487, 0)).saturating_mul(y as u64))
			.saturating_add(T::DbWeight::get().reads(10 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn schedule_leave_delegators() -> Weight {
		(Weight::from_parts(29_970_000, 0))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidateState` (r:29 w:29)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:1 w:1)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(124), added: 2599, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:1)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Total` (r:1 w:1)
	// Proof: `ParachainStaking::Total` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn execute_leave_delegators(x: u32, ) -> Weight {
		(Weight::from_parts(30_138_059, 0))
			// Standard Error: 116_246
			.saturating_add((Weight::from_parts(37_661_084, 0)).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(x as u64)))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(x as u64)))
	}
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cancel_leave_delegators() -> Weight {
		(Weight::from_parts(28_770_000, 0))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn schedule_revoke_delegation() -> Weight {
		(Weight::from_parts(33_140_000, 0))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:1 w:0)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(124), added: 2599, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:0)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn schedule_delegator_bond_more() -> Weight {
		(Weight::from_parts(55_590_000, 0))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn schedule_delegator_bond_less() -> Weight {
		(Weight::from_parts(33_310_000, 0))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:1 w:1)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(124), added: 2599, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:1)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Total` (r:1 w:1)
	// Proof: `ParachainStaking::Total` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn execute_revoke_delegation() -> Weight {
		(Weight::from_parts(120_020_000, 0))
			.saturating_add(T::DbWeight::get().reads(7 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:1 w:1)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(124), added: 2599, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:1)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Total` (r:1 w:1)
	// Proof: `ParachainStaking::Total` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn execute_delegator_bond_more() -> Weight {
		(Weight::from_parts(118_400_000, 0))
			.saturating_add(T::DbWeight::get().reads(7 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:1 w:1)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(124), added: 2599, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:1)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Total` (r:1 w:1)
	// Proof: `ParachainStaking::Total` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn execute_delegator_bond_less() -> Weight {
		(Weight::from_parts(119_180_000, 0))
			.saturating_add(T::DbWeight::get().reads(7 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cancel_revoke_delegation() -> Weight {
		(Weight::from_parts(27_810_000, 0))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cancel_delegator_bond_more() -> Weight {
		(Weight::from_parts(35_100_000, 0))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cancel_delegator_bond_less() -> Weight {
		(Weight::from_parts(40_170_000, 0))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: `Xyk::LiquidityPools` (r:1 w:0)
	// Proof: `Xyk::LiquidityPools` (`max_values`: None, `max_size`: Some(41), added: 2516, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::StakingLiquidityTokens` (r:1 w:1)
	// Proof: `ParachainStaking::StakingLiquidityTokens` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn add_staking_liquidity_token(x: u32, ) -> Weight {
		(Weight::from_parts(25_681_172, 0))
			// Standard Error: 3_287
			.saturating_add((Weight::from_parts(160_557, 0)).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::StakingLiquidityTokens` (r:1 w:1)
	// Proof: `ParachainStaking::StakingLiquidityTokens` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn remove_staking_liquidity_token(x: u32, ) -> Weight {
		(Weight::from_parts(18_485_384, 0))
			// Standard Error: 2_633
			.saturating_add((Weight::from_parts(148_333, 0)).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:99 w:0)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:0)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::AggregatorMetadata` (r:1 w:1)
	// Proof: `ParachainStaking::AggregatorMetadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidateAggregator` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateAggregator` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn aggregator_update_metadata() -> Weight {
		(Weight::from_parts(1_637_999_000, 0))
			.saturating_add(T::DbWeight::get().reads(102 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:0)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidateAggregator` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateAggregator` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::AggregatorMetadata` (r:2 w:2)
	// Proof: `ParachainStaking::AggregatorMetadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_candidate_aggregator() -> Weight {
		(Weight::from_parts(106_940_000, 0))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: `ParachainStaking::RoundCollatorRewardInfo` (r:2 w:1)
	// Proof: `ParachainStaking::RoundCollatorRewardInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Tokens::Accounts` (r:32 w:32)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:32 w:31)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	fn payout_collator_rewards() -> Weight {
		(Weight::from_parts(1_382_470_000, 0))
			.saturating_add(T::DbWeight::get().reads(66 as u64))
			.saturating_add(T::DbWeight::get().writes(64 as u64))
	}
	// Storage: `ParachainStaking::RoundCollatorRewardInfo` (r:1 w:1)
	// Proof: `ParachainStaking::RoundCollatorRewardInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Tokens::Accounts` (r:2 w:2)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:2 w:1)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	fn payout_delegator_reward() -> Weight {
		(Weight::from_parts(76_060_000, 0))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn passive_session_change() -> Weight {
		(Weight::from_parts(7_870_000, 0))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: `ParachainStaking::Round` (r:1 w:1)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Session::CurrentIndex` (r:1 w:1)
	// Proof: `Session::CurrentIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Session::QueuedChanged` (r:1 w:1)
	// Proof: `Session::QueuedChanged` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Session::QueuedKeys` (r:1 w:1)
	// Proof: `Session::QueuedKeys` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Session::DisabledValidators` (r:1 w:0)
	// Proof: `Session::DisabledValidators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Points` (r:1 w:1)
	// Proof: `ParachainStaking::Points` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Issuance::SessionIssuance` (r:1 w:1)
	// Proof: `Issuance::SessionIssuance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::RoundAggregatorInfo` (r:1 w:2)
	// Proof: `ParachainStaking::RoundAggregatorInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::AwardedPts` (r:52 w:51)
	// Proof: `ParachainStaking::AwardedPts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::AtStake` (r:51 w:102)
	// Proof: `ParachainStaking::AtStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CollatorCommission` (r:1 w:0)
	// Proof: `ParachainStaking::CollatorCommission` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::StakingLiquidityTokens` (r:1 w:1)
	// Proof: `ParachainStaking::StakingLiquidityTokens` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Xyk::LiquidityPools` (r:100 w:0)
	// Proof: `Xyk::LiquidityPools` (`max_values`: None, `max_size`: Some(41), added: 2516, mode: `MaxEncodedLen`)
	// Storage: `Xyk::Pools` (r:100 w:0)
	// Proof: `Xyk::Pools` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	// Storage: `Tokens::TotalIssuance` (r:101 w:1)
	// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:0)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidateAggregator` (r:1 w:0)
	// Proof: `ParachainStaking::CandidateAggregator` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::TotalSelected` (r:1 w:0)
	// Proof: `ParachainStaking::TotalSelected` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidateState` (r:51 w:0)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Issuance::IssuanceConfigStore` (r:1 w:0)
	// Proof: `Issuance::IssuanceConfigStore` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ProofOfStake::PromotedPoolRewards` (r:1 w:1)
	// Proof: `ProofOfStake::PromotedPoolRewards` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ProofOfStake::TotalActivatedLiquidity` (r:100 w:0)
	// Proof: `ProofOfStake::TotalActivatedLiquidity` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Tokens::Accounts` (r:2 w:2)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `Session::NextKeys` (r:51 w:0)
	// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Aura::Authorities` (r:1 w:0)
	// Proof: `Aura::Authorities` (`max_values`: Some(1), `max_size`: Some(3200004), added: 3200499, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::SelectedCandidates` (r:0 w:1)
	// Proof: `ParachainStaking::SelectedCandidates` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::RoundCollatorRewardInfo` (r:0 w:51)
	// Proof: `ParachainStaking::RoundCollatorRewardInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Session::Validators` (r:0 w:1)
	// Proof: `Session::Validators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn active_session_change(x: u32, y: u32, z: u32, ) -> Weight {
		(Weight::from_parts(1_680_554_785, 0))
			// Standard Error: 111_252
			.saturating_add((Weight::from_parts(19_982_292, 0)).saturating_mul(x as u64))
			// Standard Error: 228_151
			.saturating_add((Weight::from_parts(7_042_416, 0)).saturating_mul(y as u64))
			// Standard Error: 395_185
			.saturating_add((Weight::from_parts(36_984_074, 0)).saturating_mul(z as u64))
			.saturating_add(T::DbWeight::get().reads(224 as u64))
			.saturating_add(T::DbWeight::get().reads((4 as u64).saturating_mul(x as u64)))
			.saturating_add(T::DbWeight::get().writes(219 as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: `ParachainStaking::TotalSelected` (r:1 w:1)
	// Proof: `ParachainStaking::TotalSelected` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_total_selected() -> Weight {
		(Weight::from_parts(18_240_000, 0))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::CollatorCommission` (r:1 w:1)
	// Proof: `ParachainStaking::CollatorCommission` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_collator_commission() -> Weight {
		(Weight::from_parts(18_140_000, 0))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:0)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::AggregatorMetadata` (r:1 w:0)
	// Proof: `ParachainStaking::AggregatorMetadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::StakingLiquidityTokens` (r:1 w:0)
	// Proof: `ParachainStaking::StakingLiquidityTokens` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Xyk::LiquidityPools` (r:1 w:0)
	// Proof: `Xyk::LiquidityPools` (`max_values`: None, `max_size`: Some(41), added: 2516, mode: `MaxEncodedLen`)
	// Storage: `Xyk::Pools` (r:1 w:0)
	// Proof: `Xyk::Pools` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	// Storage: `Tokens::TotalIssuance` (r:1 w:0)
	// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:1 w:1)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(124), added: 2599, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:1)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::Total` (r:1 w:1)
	// Proof: `ParachainStaking::Total` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn join_candidates(x: u32, y: u32, ) -> Weight {
		(Weight::from_parts(117_053_879, 0))
			// Standard Error: 7_446
			.saturating_add((Weight::from_parts(142_269, 0)).saturating_mul(x as u64))
			// Standard Error: 7_356
			.saturating_add((Weight::from_parts(208_459, 0)).saturating_mul(y as u64))
			.saturating_add(RocksDbWeight::get().reads(11 as u64))
			.saturating_add(RocksDbWeight::get().writes(5 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn schedule_leave_candidates(x: u32, ) -> Weight {
		(Weight::from_parts(37_952_996, 0))
			// Standard Error: 2_861
			.saturating_add((Weight::from_parts(97_664, 0)).saturating_mul(x as u64))
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:30 w:30)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(124), added: 2599, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:30 w:30)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::DelegatorState` (r:29 w:29)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidateAggregator` (r:1 w:0)
	// Proof: `ParachainStaking::CandidateAggregator` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Total` (r:1 w:1)
	// Proof: `ParachainStaking::Total` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn execute_leave_candidates(x: u32, ) -> Weight {
		(Weight::from_parts(78_861_262, 0))
			// Standard Error: 107_452
			.saturating_add((Weight::from_parts(30_047_808, 0)).saturating_mul(x as u64))
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().reads((3 as u64).saturating_mul(x as u64)))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
			.saturating_add(RocksDbWeight::get().writes((3 as u64).saturating_mul(x as u64)))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn cancel_leave_candidates(x: u32, ) -> Weight {
		(Weight::from_parts(35_957_664, 0))
			// Standard Error: 2_682
			.saturating_add((Weight::from_parts(90_614, 0)).saturating_mul(x as u64))
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn go_offline() -> Weight {
		(Weight::from_parts(34_300_000, 0))
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn go_online() -> Weight {
		(Weight::from_parts(34_580_000, 0))
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:1 w:0)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(124), added: 2599, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:0)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn schedule_candidate_bond_more() -> Weight {
		(Weight::from_parts(49_480_000, 0))
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Xyk::LiquidityPools` (r:1 w:0)
	// Proof: `Xyk::LiquidityPools` (`max_values`: None, `max_size`: Some(41), added: 2516, mode: `MaxEncodedLen`)
	// Storage: `Xyk::Pools` (r:1 w:0)
	// Proof: `Xyk::Pools` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	// Storage: `Tokens::TotalIssuance` (r:1 w:0)
	// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn schedule_candidate_bond_less() -> Weight {
		(Weight::from_parts(52_750_000, 0))
			.saturating_add(RocksDbWeight::get().reads(5 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:1 w:1)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(124), added: 2599, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:1)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::Total` (r:1 w:1)
	// Proof: `ParachainStaking::Total` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn execute_candidate_bond_more() -> Weight {
		(Weight::from_parts(94_970_000, 0))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(5 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:1 w:1)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(124), added: 2599, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:1)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::Total` (r:1 w:1)
	// Proof: `ParachainStaking::Total` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn execute_candidate_bond_less() -> Weight {
		(Weight::from_parts(101_731_000, 0))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(5 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cancel_candidate_bond_more() -> Weight {
		(Weight::from_parts(28_020_000, 0))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cancel_candidate_bond_less() -> Weight {
		(Weight::from_parts(26_969_000, 0))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::AggregatorMetadata` (r:1 w:0)
	// Proof: `ParachainStaking::AggregatorMetadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Xyk::LiquidityPools` (r:1 w:0)
	// Proof: `Xyk::LiquidityPools` (`max_values`: None, `max_size`: Some(41), added: 2516, mode: `MaxEncodedLen`)
	// Storage: `Xyk::Pools` (r:1 w:0)
	// Proof: `Xyk::Pools` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	// Storage: `Tokens::TotalIssuance` (r:1 w:0)
	// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:1 w:1)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(124), added: 2599, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:1)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Total` (r:1 w:1)
	// Proof: `ParachainStaking::Total` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn delegate(x: u32, y: u32, ) -> Weight {
		(Weight::from_parts(119_400_015, 0))
			// Standard Error: 19_692
			.saturating_add((Weight::from_parts(211_488, 0)).saturating_mul(x as u64))
			// Standard Error: 19_029
			.saturating_add((Weight::from_parts(310_487, 0)).saturating_mul(y as u64))
			.saturating_add(RocksDbWeight::get().reads(10 as u64))
			.saturating_add(RocksDbWeight::get().writes(6 as u64))
	}
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn schedule_leave_delegators() -> Weight {
		(Weight::from_parts(29_970_000, 0))
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidateState` (r:29 w:29)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:1 w:1)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(124), added: 2599, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:1)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Total` (r:1 w:1)
	// Proof: `ParachainStaking::Total` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn execute_leave_delegators(x: u32, ) -> Weight {
		(Weight::from_parts(30_138_059, 0))
			// Standard Error: 116_246
			.saturating_add((Weight::from_parts(37_661_084, 0)).saturating_mul(x as u64))
			.saturating_add(RocksDbWeight::get().reads(5 as u64))
			.saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(x as u64)))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
			.saturating_add(RocksDbWeight::get().writes((1 as u64).saturating_mul(x as u64)))
	}
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cancel_leave_delegators() -> Weight {
		(Weight::from_parts(28_770_000, 0))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn schedule_revoke_delegation() -> Weight {
		(Weight::from_parts(33_140_000, 0))
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:1 w:0)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(124), added: 2599, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:0)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn schedule_delegator_bond_more() -> Weight {
		(Weight::from_parts(55_590_000, 0))
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn schedule_delegator_bond_less() -> Weight {
		(Weight::from_parts(33_310_000, 0))
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:1 w:1)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(124), added: 2599, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:1)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Total` (r:1 w:1)
	// Proof: `ParachainStaking::Total` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn execute_revoke_delegation() -> Weight {
		(Weight::from_parts(120_020_000, 0))
			.saturating_add(RocksDbWeight::get().reads(7 as u64))
			.saturating_add(RocksDbWeight::get().writes(6 as u64))
	}
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:1 w:1)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(124), added: 2599, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:1)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Total` (r:1 w:1)
	// Proof: `ParachainStaking::Total` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn execute_delegator_bond_more() -> Weight {
		(Weight::from_parts(118_400_000, 0))
			.saturating_add(RocksDbWeight::get().reads(7 as u64))
			.saturating_add(RocksDbWeight::get().writes(6 as u64))
	}
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:1 w:1)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(124), added: 2599, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:1)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Total` (r:1 w:1)
	// Proof: `ParachainStaking::Total` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn execute_delegator_bond_less() -> Weight {
		(Weight::from_parts(119_180_000, 0))
			.saturating_add(RocksDbWeight::get().reads(7 as u64))
			.saturating_add(RocksDbWeight::get().writes(6 as u64))
	}
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cancel_revoke_delegation() -> Weight {
		(Weight::from_parts(27_810_000, 0))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cancel_delegator_bond_more() -> Weight {
		(Weight::from_parts(35_100_000, 0))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cancel_delegator_bond_less() -> Weight {
		(Weight::from_parts(40_170_000, 0))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: `Xyk::LiquidityPools` (r:1 w:0)
	// Proof: `Xyk::LiquidityPools` (`max_values`: None, `max_size`: Some(41), added: 2516, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::StakingLiquidityTokens` (r:1 w:1)
	// Proof: `ParachainStaking::StakingLiquidityTokens` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn add_staking_liquidity_token(x: u32, ) -> Weight {
		(Weight::from_parts(25_681_172, 0))
			// Standard Error: 3_287
			.saturating_add((Weight::from_parts(160_557, 0)).saturating_mul(x as u64))
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::StakingLiquidityTokens` (r:1 w:1)
	// Proof: `ParachainStaking::StakingLiquidityTokens` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn remove_staking_liquidity_token(x: u32, ) -> Weight {
		(Weight::from_parts(18_485_384, 0))
			// Standard Error: 2_633
			.saturating_add((Weight::from_parts(148_333, 0)).saturating_mul(x as u64))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:99 w:0)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:0)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::AggregatorMetadata` (r:1 w:1)
	// Proof: `ParachainStaking::AggregatorMetadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidateAggregator` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateAggregator` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn aggregator_update_metadata() -> Weight {
		(Weight::from_parts(1_637_999_000, 0))
			.saturating_add(RocksDbWeight::get().reads(102 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:0)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidateAggregator` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateAggregator` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::AggregatorMetadata` (r:2 w:2)
	// Proof: `ParachainStaking::AggregatorMetadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_candidate_aggregator() -> Weight {
		(Weight::from_parts(106_940_000, 0))
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: `ParachainStaking::RoundCollatorRewardInfo` (r:2 w:1)
	// Proof: `ParachainStaking::RoundCollatorRewardInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Tokens::Accounts` (r:32 w:32)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:32 w:31)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	fn payout_collator_rewards() -> Weight {
		(Weight::from_parts(1_382_470_000, 0))
			.saturating_add(RocksDbWeight::get().reads(66 as u64))
			.saturating_add(RocksDbWeight::get().writes(64 as u64))
	}
	// Storage: `ParachainStaking::RoundCollatorRewardInfo` (r:1 w:1)
	// Proof: `ParachainStaking::RoundCollatorRewardInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Tokens::Accounts` (r:2 w:2)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:2 w:1)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	fn payout_delegator_reward() -> Weight {
		(Weight::from_parts(76_060_000, 0))
			.saturating_add(RocksDbWeight::get().reads(5 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn passive_session_change() -> Weight {
		(Weight::from_parts(7_870_000, 0))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
	}
	// Storage: `ParachainStaking::Round` (r:1 w:1)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Session::CurrentIndex` (r:1 w:1)
	// Proof: `Session::CurrentIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Session::QueuedChanged` (r:1 w:1)
	// Proof: `Session::QueuedChanged` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Session::QueuedKeys` (r:1 w:1)
	// Proof: `Session::QueuedKeys` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Session::DisabledValidators` (r:1 w:0)
	// Proof: `Session::DisabledValidators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Points` (r:1 w:1)
	// Proof: `ParachainStaking::Points` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Issuance::SessionIssuance` (r:1 w:1)
	// Proof: `Issuance::SessionIssuance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::RoundAggregatorInfo` (r:1 w:2)
	// Proof: `ParachainStaking::RoundAggregatorInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::AwardedPts` (r:52 w:51)
	// Proof: `ParachainStaking::AwardedPts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::AtStake` (r:51 w:102)
	// Proof: `ParachainStaking::AtStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CollatorCommission` (r:1 w:0)
	// Proof: `ParachainStaking::CollatorCommission` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::StakingLiquidityTokens` (r:1 w:1)
	// Proof: `ParachainStaking::StakingLiquidityTokens` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Xyk::LiquidityPools` (r:100 w:0)
	// Proof: `Xyk::LiquidityPools` (`max_values`: None, `max_size`: Some(41), added: 2516, mode: `MaxEncodedLen`)
	// Storage: `Xyk::Pools` (r:100 w:0)
	// Proof: `Xyk::Pools` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	// Storage: `Tokens::TotalIssuance` (r:101 w:1)
	// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:0)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidateAggregator` (r:1 w:0)
	// Proof: `ParachainStaking::CandidateAggregator` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::TotalSelected` (r:1 w:0)
	// Proof: `ParachainStaking::TotalSelected` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidateState` (r:51 w:0)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Issuance::IssuanceConfigStore` (r:1 w:0)
	// Proof: `Issuance::IssuanceConfigStore` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ProofOfStake::PromotedPoolRewards` (r:1 w:1)
	// Proof: `ProofOfStake::PromotedPoolRewards` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ProofOfStake::TotalActivatedLiquidity` (r:100 w:0)
	// Proof: `ProofOfStake::TotalActivatedLiquidity` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Tokens::Accounts` (r:2 w:2)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	// Storage: `Session::NextKeys` (r:51 w:0)
	// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Aura::Authorities` (r:1 w:0)
	// Proof: `Aura::Authorities` (`max_values`: Some(1), `max_size`: Some(3200004), added: 3200499, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::SelectedCandidates` (r:0 w:1)
	// Proof: `ParachainStaking::SelectedCandidates` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::RoundCollatorRewardInfo` (r:0 w:51)
	// Proof: `ParachainStaking::RoundCollatorRewardInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Session::Validators` (r:0 w:1)
	// Proof: `Session::Validators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn active_session_change(x: u32, y: u32, z: u32, ) -> Weight {
		(Weight::from_parts(1_680_554_785, 0))
			// Standard Error: 111_252
			.saturating_add((Weight::from_parts(19_982_292, 0)).saturating_mul(x as u64))
			// Standard Error: 228_151
			.saturating_add((Weight::from_parts(7_042_416, 0)).saturating_mul(y as u64))
			// Standard Error: 395_185
			.saturating_add((Weight::from_parts(36_984_074, 0)).saturating_mul(z as u64))
			.saturating_add(RocksDbWeight::get().reads(224 as u64))
			.saturating_add(RocksDbWeight::get().reads((4 as u64).saturating_mul(x as u64)))
			.saturating_add(RocksDbWeight::get().writes(219 as u64))
	}
}
