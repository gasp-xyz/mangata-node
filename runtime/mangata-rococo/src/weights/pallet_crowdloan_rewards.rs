// This file is part of Mangata.

// Copyright (C) 2020-2022 Mangata Foundation.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_crowdloan_rewards
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-18, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("kusama"), DB CACHE: 1024

// Executed Command:
// target/release/mangata-node
// benchmark
// pallet
// -l=info,xyk=error,collective-mangata=warn,bootstrap=warn
// --chain
// kusama
// --execution
// wasm
// --wasm-execution
// compiled
// --pallet
// *
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --template
// ./templates/module-weight-template.hbs
// --output
// ./benchmarks/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_crowdloan_rewards.
pub trait WeightInfo {
	fn set_crowdloan_allocation() -> Weight;
	fn initialize_reward_vec(x: u32, ) -> Weight;
	fn complete_initialization() -> Weight;
	fn claim() -> Weight;
	fn update_reward_address() -> Weight;
	fn associate_native_identity() -> Weight;
	fn change_association_with_relay_keys(x: u32, ) -> Weight;
}

/// Weights for pallet_crowdloan_rewards using the Mangata node and recommended hardware.
pub struct ModuleWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_crowdloan_rewards::WeightInfo for ModuleWeight<T> {
	// Storage: Crowdloan CrowdloanAllocation (r:0 w:1)
	// Proof Skipped: Crowdloan CrowdloanAllocation (max_values: Some(1), max_size: None, mode: Measured)
	fn set_crowdloan_allocation() -> Weight {
		(Weight::from_parts(5_800_000, 0))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Crowdloan Initialized (r:1 w:0)
	// Proof Skipped: Crowdloan Initialized (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Crowdloan InitializedRewardAmount (r:1 w:1)
	// Proof Skipped: Crowdloan InitializedRewardAmount (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Crowdloan TotalContributors (r:1 w:1)
	// Proof Skipped: Crowdloan TotalContributors (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Crowdloan CrowdloanAllocation (r:1 w:0)
	// Proof Skipped: Crowdloan CrowdloanAllocation (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Crowdloan ClaimedRelayChainIds (r:100 w:100)
	// Proof Skipped: Crowdloan ClaimedRelayChainIds (max_values: None, max_size: None, mode: Measured)
	// Storage: Crowdloan UnassociatedContributions (r:100 w:0)
	// Proof Skipped: Crowdloan UnassociatedContributions (max_values: None, max_size: None, mode: Measured)
	// Storage: Tokens NextCurrencyId (r:1 w:0)
	// Proof: Tokens NextCurrencyId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Tokens Accounts (r:100 w:100)
	// Proof: Tokens Accounts (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
	// Storage: System Account (r:100 w:100)
	// Proof Skipped: System Account (max_values: None, max_size: None, mode: Measured)
	// Storage: Crowdloan AccountsPayable (r:100 w:100)
	// Proof Skipped: Crowdloan AccountsPayable (max_values: None, max_size: None, mode: Measured)
	fn initialize_reward_vec(x: u32, ) -> Weight {
		(Weight::from_parts(170_661_769, 0))
			// Standard Error: 50_081
			.saturating_add((Weight::from_parts(71_125_436, 0)).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().reads((5 as u64).saturating_mul(x as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
			.saturating_add(T::DbWeight::get().writes((4 as u64).saturating_mul(x as u64)))
	}
	// Storage: Crowdloan Initialized (r:1 w:1)
	// Proof Skipped: Crowdloan Initialized (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Crowdloan InitRelayBlock (r:1 w:0)
	// Proof Skipped: Crowdloan InitRelayBlock (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Crowdloan InitializedRewardAmount (r:1 w:0)
	// Proof Skipped: Crowdloan InitializedRewardAmount (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Crowdloan CrowdloanAllocation (r:1 w:0)
	// Proof Skipped: Crowdloan CrowdloanAllocation (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Crowdloan TotalContributors (r:1 w:0)
	// Proof Skipped: Crowdloan TotalContributors (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Crowdloan EndRelayBlock (r:0 w:1)
	// Proof Skipped: Crowdloan EndRelayBlock (max_values: Some(1), max_size: None, mode: Measured)
	fn complete_initialization() -> Weight {
		(Weight::from_parts(21_060_000, 0))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: Crowdloan Initialized (r:1 w:0)
	// Proof Skipped: Crowdloan Initialized (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Crowdloan AccountsPayable (r:1 w:1)
	// Proof Skipped: Crowdloan AccountsPayable (max_values: None, max_size: None, mode: Measured)
	// Storage: Crowdloan InitRelayBlock (r:1 w:0)
	// Proof Skipped: Crowdloan InitRelayBlock (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Crowdloan EndRelayBlock (r:1 w:0)
	// Proof Skipped: Crowdloan EndRelayBlock (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Tokens NextCurrencyId (r:1 w:0)
	// Proof: Tokens NextCurrencyId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Tokens Accounts (r:1 w:1)
	// Proof: Tokens Accounts (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
	fn claim() -> Weight {
		(Weight::from_parts(68_230_000, 0))
			.saturating_add(T::DbWeight::get().reads(7 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Crowdloan AccountsPayable (r:2 w:2)
	// Proof Skipped: Crowdloan AccountsPayable (max_values: None, max_size: None, mode: Measured)
	fn update_reward_address() -> Weight {
		(Weight::from_parts(31_860_000, 0))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: Crowdloan UnassociatedContributions (r:1 w:1)
	// Proof Skipped: Crowdloan UnassociatedContributions (max_values: None, max_size: None, mode: Measured)
	// Storage: Crowdloan ClaimedRelayChainIds (r:1 w:1)
	// Proof Skipped: Crowdloan ClaimedRelayChainIds (max_values: None, max_size: None, mode: Measured)
	// Storage: Crowdloan AccountsPayable (r:1 w:1)
	// Proof Skipped: Crowdloan AccountsPayable (max_values: None, max_size: None, mode: Measured)
	// Storage: Tokens NextCurrencyId (r:1 w:0)
	// Proof: Tokens NextCurrencyId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Tokens Accounts (r:1 w:1)
	// Proof: Tokens Accounts (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
	fn associate_native_identity() -> Weight {
		(Weight::from_parts(147_350_000, 0))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: Crowdloan AccountsPayable (r:2 w:2)
	// Proof Skipped: Crowdloan AccountsPayable (max_values: None, max_size: None, mode: Measured)
	fn change_association_with_relay_keys(x: u32, ) -> Weight {
		(Weight::from_parts(34_693_550, 0))
			// Standard Error: 8_870
			.saturating_add((Weight::from_parts(62_853_805, 0)).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Crowdloan CrowdloanAllocation (r:0 w:1)
	// Proof Skipped: Crowdloan CrowdloanAllocation (max_values: Some(1), max_size: None, mode: Measured)
	fn set_crowdloan_allocation() -> Weight {
		(Weight::from_parts(5_800_000, 0))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Crowdloan Initialized (r:1 w:0)
	// Proof Skipped: Crowdloan Initialized (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Crowdloan InitializedRewardAmount (r:1 w:1)
	// Proof Skipped: Crowdloan InitializedRewardAmount (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Crowdloan TotalContributors (r:1 w:1)
	// Proof Skipped: Crowdloan TotalContributors (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Crowdloan CrowdloanAllocation (r:1 w:0)
	// Proof Skipped: Crowdloan CrowdloanAllocation (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Crowdloan ClaimedRelayChainIds (r:100 w:100)
	// Proof Skipped: Crowdloan ClaimedRelayChainIds (max_values: None, max_size: None, mode: Measured)
	// Storage: Crowdloan UnassociatedContributions (r:100 w:0)
	// Proof Skipped: Crowdloan UnassociatedContributions (max_values: None, max_size: None, mode: Measured)
	// Storage: Tokens NextCurrencyId (r:1 w:0)
	// Proof: Tokens NextCurrencyId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Tokens Accounts (r:100 w:100)
	// Proof: Tokens Accounts (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
	// Storage: System Account (r:100 w:100)
	// Proof Skipped: System Account (max_values: None, max_size: None, mode: Measured)
	// Storage: Crowdloan AccountsPayable (r:100 w:100)
	// Proof Skipped: Crowdloan AccountsPayable (max_values: None, max_size: None, mode: Measured)
	fn initialize_reward_vec(x: u32, ) -> Weight {
		(Weight::from_parts(170_661_769, 0))
			// Standard Error: 50_081
			.saturating_add((Weight::from_parts(71_125_436, 0)).saturating_mul(x as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().reads((5 as u64).saturating_mul(x as u64)))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
			.saturating_add(RocksDbWeight::get().writes((4 as u64).saturating_mul(x as u64)))
	}
	// Storage: Crowdloan Initialized (r:1 w:1)
	// Proof Skipped: Crowdloan Initialized (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Crowdloan InitRelayBlock (r:1 w:0)
	// Proof Skipped: Crowdloan InitRelayBlock (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Crowdloan InitializedRewardAmount (r:1 w:0)
	// Proof Skipped: Crowdloan InitializedRewardAmount (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Crowdloan CrowdloanAllocation (r:1 w:0)
	// Proof Skipped: Crowdloan CrowdloanAllocation (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Crowdloan TotalContributors (r:1 w:0)
	// Proof Skipped: Crowdloan TotalContributors (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Crowdloan EndRelayBlock (r:0 w:1)
	// Proof Skipped: Crowdloan EndRelayBlock (max_values: Some(1), max_size: None, mode: Measured)
	fn complete_initialization() -> Weight {
		(Weight::from_parts(21_060_000, 0))
			.saturating_add(RocksDbWeight::get().reads(5 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: Crowdloan Initialized (r:1 w:0)
	// Proof Skipped: Crowdloan Initialized (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Crowdloan AccountsPayable (r:1 w:1)
	// Proof Skipped: Crowdloan AccountsPayable (max_values: None, max_size: None, mode: Measured)
	// Storage: Crowdloan InitRelayBlock (r:1 w:0)
	// Proof Skipped: Crowdloan InitRelayBlock (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Crowdloan EndRelayBlock (r:1 w:0)
	// Proof Skipped: Crowdloan EndRelayBlock (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Tokens NextCurrencyId (r:1 w:0)
	// Proof: Tokens NextCurrencyId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Tokens Accounts (r:1 w:1)
	// Proof: Tokens Accounts (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
	fn claim() -> Weight {
		(Weight::from_parts(68_230_000, 0))
			.saturating_add(RocksDbWeight::get().reads(7 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: Crowdloan AccountsPayable (r:2 w:2)
	// Proof Skipped: Crowdloan AccountsPayable (max_values: None, max_size: None, mode: Measured)
	fn update_reward_address() -> Weight {
		(Weight::from_parts(31_860_000, 0))
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: Crowdloan UnassociatedContributions (r:1 w:1)
	// Proof Skipped: Crowdloan UnassociatedContributions (max_values: None, max_size: None, mode: Measured)
	// Storage: Crowdloan ClaimedRelayChainIds (r:1 w:1)
	// Proof Skipped: Crowdloan ClaimedRelayChainIds (max_values: None, max_size: None, mode: Measured)
	// Storage: Crowdloan AccountsPayable (r:1 w:1)
	// Proof Skipped: Crowdloan AccountsPayable (max_values: None, max_size: None, mode: Measured)
	// Storage: Tokens NextCurrencyId (r:1 w:0)
	// Proof: Tokens NextCurrencyId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Tokens Accounts (r:1 w:1)
	// Proof: Tokens Accounts (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
	fn associate_native_identity() -> Weight {
		(Weight::from_parts(147_350_000, 0))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(5 as u64))
	}
	// Storage: Crowdloan AccountsPayable (r:2 w:2)
	// Proof Skipped: Crowdloan AccountsPayable (max_values: None, max_size: None, mode: Measured)
	fn change_association_with_relay_keys(x: u32, ) -> Weight {
		(Weight::from_parts(34_693_550, 0))
			// Standard Error: 8_870
			.saturating_add((Weight::from_parts(62_853_805, 0)).saturating_mul(x as u64))
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
}
