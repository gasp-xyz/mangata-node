[package]
name = "rollup-node"
version = "1.0.0"
description = "Mangata rollup node"
authors = ["Mangata Team"]
edition.workspace = true
license = "MIT-0"
publish = false
repository.workspace = true
build = "build.rs"

[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]

[[bin]]
name = "rollup-node"

[dependencies]
clap = { version = "4.4.2", features = ["derive", "env"] }
codec = { workspace = true }
futures = { workspace = true }
hex = { workspace = true }
hex-literal = { workspace = true }
jsonrpsee = { workspace = true, features = ["server"] }
log = { workspace = true }
serde = { workspace = true, features = ["derive"] }
serde_json = { workspace = true }
array-bytes = { workspace = true }
rand = "0.8.5"
color-print = "0.3.4"

# Local
rollup-runtime = { path = "../runtime/" }
xyk-rpc = { path = "../../pallets/xyk/rpc" }
xyk-runtime-api = { path = "../../pallets/xyk/runtime-api" }
rolldown-rpc = { path = "../../pallets/rolldown/rpc" }

rolldown-runtime-api = { path = "../../pallets/rolldown/runtime-api" }
proof-of-stake-runtime-api = { path = '../../pallets/proof-of-stake/runtime-api' }
proof-of-stake-rpc = { path = '../../pallets/proof-of-stake/rpc' }
metamask-signature-rpc = { path = '../../pallets/metamask-signature-rpc/' }
pallet-rolldown = { path = "../../pallets/rolldown" }

# Substrate
frame-benchmarking = { workspace = true }
frame-benchmarking-cli = { workspace = true }
frame-system = { workspace = true }
pallet-transaction-payment = { workspace = true }
pallet-transaction-payment-rpc = { workspace = true }
sc-basic-authorship-ver = { workspace = true }
sc-chain-spec = { workspace = true }
sc-cli = { workspace = true }
sc-client-api = { workspace = true }
sc-executor = { workspace = true }
sc-network = { workspace = true }
sc-network-sync = { workspace = true }
sc-offchain = { workspace = true }
sc-rpc = { workspace = true }
sc-rpc-api = { workspace = true }
sc-service = { workspace = true }
sc-sysinfo = { workspace = true }
sc-telemetry = { workspace = true }
sc-tracing = { workspace = true }
sc-transaction-pool = { workspace = true }
sc-transaction-pool-api = { workspace = true }
sp-api = { workspace = true }
sp-block-builder = { workspace = true }
sp-blockchain = { workspace = true }
sc-consensus-aura = { workspace = true }
sp-consensus-aura = { workspace = true }
sc-consensus = { workspace = true }
sc-consensus-grandpa = { workspace = true }
sp-consensus-grandpa = { workspace = true }
sp-statement-store = { workspace = true }
sp-std = { workspace = true }
sp-core = { workspace = true }
sp-io = { workspace = true }
sp-inherents = { workspace = true }
sp-keyring = { workspace = true }
sp-keystore = { workspace = true }
sp-offchain = { workspace = true }
sp-runtime = { workspace = true }
sp-session = { workspace = true }
sp-timestamp = { workspace = true }
sp-transaction-pool = { workspace = true }
sp-ver = { workspace = true, features = ["helpers"] }
substrate-prometheus-endpoint = { workspace = true }
ver-api = { workspace = true }
try-runtime-cli = { workspace = true, optional = true }

substrate-frame-rpc-system = { package = "mangata-rpc-nonce", path = "../../rpc/nonce" }

[dev-dependencies]
tempfile = "3.8.0"

[build-dependencies]
substrate-build-script-utils = { workspace = true }

[features]
default = ["std"]
std = [
	"rollup-runtime/std",
	"xyk-rpc/std",
	"rolldown-rpc/std",
]
# Dependencies that are only required if runtime benchmarking should be build.
runtime-benchmarks = [
	"frame-benchmarking-cli/runtime-benchmarks",
	"frame-benchmarking/runtime-benchmarks",
	"frame-system/runtime-benchmarks",
	"rollup-runtime/runtime-benchmarks",
	"sc-service/runtime-benchmarks",
	"sp-runtime/runtime-benchmarks",
]
# Enable features that allow the runtime to be tried and debugged. Name might be subject to change
# in the near future.
try-runtime = [
	"frame-system/try-runtime",
	"rollup-runtime/try-runtime",
	"pallet-transaction-payment/try-runtime",
	"sp-runtime/try-runtime",
	"try-runtime-cli/try-runtime",
]
