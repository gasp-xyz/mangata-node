// This file is part of Mangata.

// Copyright (C) 2020-2022 Mangata Foundation.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for parachain_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-18, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("kusama"), DB CACHE: 1024

// Executed Command:
// target/release/mangata-node
// benchmark
// pallet
// -l=info,xyk=error,collective-mangata=warn,bootstrap=warn
// --chain
// kusama
// --execution
// wasm
// --wasm-execution
// compiled
// --pallet
// *
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --template
// ./templates/module-weight-template.hbs
// --output
// ./benchmarks/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for parachain_staking.
pub trait WeightInfo {
	fn set_total_selected() -> Weight;
	fn set_collator_commission() -> Weight;
	fn join_candidates(x: u32, y: u32, ) -> Weight;
	fn schedule_leave_candidates(x: u32, ) -> Weight;
	fn execute_leave_candidates(x: u32, ) -> Weight;
	fn cancel_leave_candidates(x: u32, ) -> Weight;
	fn go_offline() -> Weight;
	fn go_online() -> Weight;
	fn schedule_candidate_bond_more() -> Weight;
	fn schedule_candidate_bond_less() -> Weight;
	fn execute_candidate_bond_more() -> Weight;
	fn execute_candidate_bond_less() -> Weight;
	fn cancel_candidate_bond_more() -> Weight;
	fn cancel_candidate_bond_less() -> Weight;
	fn delegate(x: u32, y: u32, ) -> Weight;
	fn schedule_leave_delegators() -> Weight;
	fn execute_leave_delegators(x: u32, ) -> Weight;
	fn cancel_leave_delegators() -> Weight;
	fn schedule_revoke_delegation() -> Weight;
	fn schedule_delegator_bond_more() -> Weight;
	fn schedule_delegator_bond_less() -> Weight;
	fn execute_revoke_delegation() -> Weight;
	fn execute_delegator_bond_more() -> Weight;
	fn execute_delegator_bond_less() -> Weight;
	fn cancel_revoke_delegation() -> Weight;
	fn cancel_delegator_bond_more() -> Weight;
	fn cancel_delegator_bond_less() -> Weight;
	fn add_staking_liquidity_token(x: u32, ) -> Weight;
	fn remove_staking_liquidity_token(x: u32, ) -> Weight;
	fn aggregator_update_metadata() -> Weight;
	fn update_candidate_aggregator() -> Weight;
	fn payout_collator_rewards() -> Weight;
	fn payout_delegator_reward() -> Weight;
	fn passive_session_change() -> Weight;
	fn active_session_change(x: u32, y: u32, z: u32, ) -> Weight;
}

/// Weights for parachain_staking using the Mangata node and recommended hardware.
pub struct ModuleWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> parachain_staking::WeightInfo for ModuleWeight<T> {
	// Storage: ParachainStaking TotalSelected (r:1 w:1)
	// Proof Skipped: ParachainStaking TotalSelected (max_values: Some(1), max_size: None, mode: Measured)
	fn set_total_selected() -> Weight {
		(Weight::from_parts(18_120_000, 0))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking CollatorCommission (r:1 w:1)
	// Proof Skipped: ParachainStaking CollatorCommission (max_values: Some(1), max_size: None, mode: Measured)
	fn set_collator_commission() -> Weight {
		(Weight::from_parts(18_170_000, 0))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking CandidateState (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidateState (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking DelegatorState (r:1 w:0)
	// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking AggregatorMetadata (r:1 w:0)
	// Proof Skipped: ParachainStaking AggregatorMetadata (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking StakingLiquidityTokens (r:1 w:0)
	// Proof Skipped: ParachainStaking StakingLiquidityTokens (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Xyk LiquidityPools (r:1 w:0)
	// Proof: Xyk LiquidityPools (max_values: None, max_size: Some(41), added: 2516, mode: MaxEncodedLen)
	// Storage: Xyk Pools (r:1 w:0)
	// Proof: Xyk Pools (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	// Storage: Tokens TotalIssuance (r:1 w:0)
	// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: MultiPurposeLiquidity ReserveStatus (r:1 w:1)
	// Proof: MultiPurposeLiquidity ReserveStatus (max_values: None, max_size: Some(124), added: 2599, mode: MaxEncodedLen)
	// Storage: Tokens Accounts (r:1 w:1)
	// Proof: Tokens Accounts (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Proof Skipped: ParachainStaking Total (max_values: None, max_size: None, mode: Measured)
	fn join_candidates(x: u32, y: u32, ) -> Weight {
		(Weight::from_parts(123_467_272, 0))
			// Standard Error: 5_457
			.saturating_add((Weight::from_parts(146_813, 0)).saturating_mul(x as u64))
			// Standard Error: 2_600
			.saturating_add((Weight::from_parts(190_628, 0)).saturating_mul(y as u64))
			.saturating_add(T::DbWeight::get().reads(11 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: ParachainStaking CandidateState (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidateState (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Proof Skipped: ParachainStaking Round (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	fn schedule_leave_candidates(x: u32, ) -> Weight {
		(Weight::from_parts(39_282_701, 0))
			// Standard Error: 2_623
			.saturating_add((Weight::from_parts(167_522, 0)).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: ParachainStaking CandidateState (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidateState (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Proof Skipped: ParachainStaking Round (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: MultiPurposeLiquidity ReserveStatus (r:25 w:25)
	// Proof: MultiPurposeLiquidity ReserveStatus (max_values: None, max_size: Some(124), added: 2599, mode: MaxEncodedLen)
	// Storage: Tokens Accounts (r:25 w:25)
	// Proof: Tokens Accounts (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
	// Storage: ParachainStaking DelegatorState (r:24 w:24)
	// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking CandidateAggregator (r:1 w:0)
	// Proof Skipped: ParachainStaking CandidateAggregator (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Proof Skipped: ParachainStaking Total (max_values: None, max_size: None, mode: Measured)
	fn execute_leave_candidates(x: u32, ) -> Weight {
		(Weight::from_parts(60_685_134, 0))
			// Standard Error: 31_073
			.saturating_add((Weight::from_parts(31_446_338, 0)).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().reads((3 as u64).saturating_mul(x as u64)))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
			.saturating_add(T::DbWeight::get().writes((3 as u64).saturating_mul(x as u64)))
	}
	// Storage: ParachainStaking CandidateState (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidateState (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	fn cancel_leave_candidates(x: u32, ) -> Weight {
		(Weight::from_parts(37_579_077, 0))
			// Standard Error: 2_367
			.saturating_add((Weight::from_parts(161_581, 0)).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: ParachainStaking CandidateState (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidateState (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Proof Skipped: ParachainStaking Round (max_values: Some(1), max_size: None, mode: Measured)
	fn go_offline() -> Weight {
		(Weight::from_parts(38_880_000, 0))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: ParachainStaking CandidateState (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidateState (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Proof Skipped: ParachainStaking Round (max_values: Some(1), max_size: None, mode: Measured)
	fn go_online() -> Weight {
		(Weight::from_parts(38_290_000, 0))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: ParachainStaking CandidateState (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidateState (max_values: None, max_size: None, mode: Measured)
	// Storage: MultiPurposeLiquidity ReserveStatus (r:1 w:0)
	// Proof: MultiPurposeLiquidity ReserveStatus (max_values: None, max_size: Some(124), added: 2599, mode: MaxEncodedLen)
	// Storage: Tokens Accounts (r:1 w:0)
	// Proof: Tokens Accounts (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Proof Skipped: ParachainStaking Round (max_values: Some(1), max_size: None, mode: Measured)
	fn schedule_candidate_bond_more() -> Weight {
		(Weight::from_parts(55_150_000, 0))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking CandidateState (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidateState (max_values: None, max_size: None, mode: Measured)
	// Storage: Xyk LiquidityPools (r:1 w:0)
	// Proof: Xyk LiquidityPools (max_values: None, max_size: Some(41), added: 2516, mode: MaxEncodedLen)
	// Storage: Xyk Pools (r:1 w:0)
	// Proof: Xyk Pools (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	// Storage: Tokens TotalIssuance (r:1 w:0)
	// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Proof Skipped: ParachainStaking Round (max_values: Some(1), max_size: None, mode: Measured)
	fn schedule_candidate_bond_less() -> Weight {
		(Weight::from_parts(57_430_000, 0))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking CandidateState (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidateState (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Proof Skipped: ParachainStaking Round (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: MultiPurposeLiquidity ReserveStatus (r:1 w:1)
	// Proof: MultiPurposeLiquidity ReserveStatus (max_values: None, max_size: Some(124), added: 2599, mode: MaxEncodedLen)
	// Storage: Tokens Accounts (r:1 w:1)
	// Proof: Tokens Accounts (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Proof Skipped: ParachainStaking Total (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	fn execute_candidate_bond_more() -> Weight {
		(Weight::from_parts(89_831_000, 0))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: ParachainStaking CandidateState (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidateState (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Proof Skipped: ParachainStaking Round (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: MultiPurposeLiquidity ReserveStatus (r:1 w:1)
	// Proof: MultiPurposeLiquidity ReserveStatus (max_values: None, max_size: Some(124), added: 2599, mode: MaxEncodedLen)
	// Storage: Tokens Accounts (r:1 w:1)
	// Proof: Tokens Accounts (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Proof Skipped: ParachainStaking Total (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	fn execute_candidate_bond_less() -> Weight {
		(Weight::from_parts(85_290_000, 0))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: ParachainStaking CandidateState (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidateState (max_values: None, max_size: None, mode: Measured)
	fn cancel_candidate_bond_more() -> Weight {
		(Weight::from_parts(29_900_000, 0))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking CandidateState (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidateState (max_values: None, max_size: None, mode: Measured)
	fn cancel_candidate_bond_less() -> Weight {
		(Weight::from_parts(29_190_000, 0))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking AggregatorMetadata (r:1 w:0)
	// Proof Skipped: ParachainStaking AggregatorMetadata (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking CandidateState (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidateState (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	// Storage: Xyk LiquidityPools (r:1 w:0)
	// Proof: Xyk LiquidityPools (max_values: None, max_size: Some(41), added: 2516, mode: MaxEncodedLen)
	// Storage: Xyk Pools (r:1 w:0)
	// Proof: Xyk Pools (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	// Storage: Tokens TotalIssuance (r:1 w:0)
	// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
	// Storage: MultiPurposeLiquidity ReserveStatus (r:1 w:1)
	// Proof: MultiPurposeLiquidity ReserveStatus (max_values: None, max_size: Some(124), added: 2599, mode: MaxEncodedLen)
	// Storage: Tokens Accounts (r:1 w:1)
	// Proof: Tokens Accounts (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Proof Skipped: ParachainStaking Total (max_values: None, max_size: None, mode: Measured)
	fn delegate(x: u32, y: u32, ) -> Weight {
		(Weight::from_parts(126_644_715, 0))
			// Standard Error: 7_517
			.saturating_add((Weight::from_parts(346_672, 0)).saturating_mul(x as u64))
			// Standard Error: 19_666
			.saturating_add((Weight::from_parts(396_238, 0)).saturating_mul(y as u64))
			.saturating_add(T::DbWeight::get().reads(10 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Proof Skipped: ParachainStaking Round (max_values: Some(1), max_size: None, mode: Measured)
	fn schedule_leave_delegators() -> Weight {
		(Weight::from_parts(32_340_000, 0))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Proof Skipped: ParachainStaking Round (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ParachainStaking CandidateState (r:29 w:29)
	// Proof Skipped: ParachainStaking CandidateState (max_values: None, max_size: None, mode: Measured)
	// Storage: MultiPurposeLiquidity ReserveStatus (r:1 w:1)
	// Proof: MultiPurposeLiquidity ReserveStatus (max_values: None, max_size: Some(124), added: 2599, mode: MaxEncodedLen)
	// Storage: Tokens Accounts (r:1 w:1)
	// Proof: Tokens Accounts (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Proof Skipped: ParachainStaking Total (max_values: None, max_size: None, mode: Measured)
	fn execute_leave_delegators(x: u32, ) -> Weight {
		(Weight::from_parts(24_536_934, 0))
			// Standard Error: 26_983
			.saturating_add((Weight::from_parts(37_923_839, 0)).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(x as u64)))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(x as u64)))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	fn cancel_leave_delegators() -> Weight {
		(Weight::from_parts(30_410_000, 0))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Proof Skipped: ParachainStaking Round (max_values: Some(1), max_size: None, mode: Measured)
	fn schedule_revoke_delegation() -> Weight {
		(Weight::from_parts(33_440_000, 0))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	// Storage: MultiPurposeLiquidity ReserveStatus (r:1 w:0)
	// Proof: MultiPurposeLiquidity ReserveStatus (max_values: None, max_size: Some(124), added: 2599, mode: MaxEncodedLen)
	// Storage: Tokens Accounts (r:1 w:0)
	// Proof: Tokens Accounts (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Proof Skipped: ParachainStaking Round (max_values: Some(1), max_size: None, mode: Measured)
	fn schedule_delegator_bond_more() -> Weight {
		(Weight::from_parts(56_360_000, 0))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Proof Skipped: ParachainStaking Round (max_values: Some(1), max_size: None, mode: Measured)
	fn schedule_delegator_bond_less() -> Weight {
		(Weight::from_parts(33_850_000, 0))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Proof Skipped: ParachainStaking Round (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ParachainStaking CandidateState (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidateState (max_values: None, max_size: None, mode: Measured)
	// Storage: MultiPurposeLiquidity ReserveStatus (r:1 w:1)
	// Proof: MultiPurposeLiquidity ReserveStatus (max_values: None, max_size: Some(124), added: 2599, mode: MaxEncodedLen)
	// Storage: Tokens Accounts (r:1 w:1)
	// Proof: Tokens Accounts (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Proof Skipped: ParachainStaking Total (max_values: None, max_size: None, mode: Measured)
	fn execute_revoke_delegation() -> Weight {
		(Weight::from_parts(110_750_000, 0))
			.saturating_add(T::DbWeight::get().reads(7 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Proof Skipped: ParachainStaking Round (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ParachainStaking CandidateState (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidateState (max_values: None, max_size: None, mode: Measured)
	// Storage: MultiPurposeLiquidity ReserveStatus (r:1 w:1)
	// Proof: MultiPurposeLiquidity ReserveStatus (max_values: None, max_size: Some(124), added: 2599, mode: MaxEncodedLen)
	// Storage: Tokens Accounts (r:1 w:1)
	// Proof: Tokens Accounts (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Proof Skipped: ParachainStaking Total (max_values: None, max_size: None, mode: Measured)
	fn execute_delegator_bond_more() -> Weight {
		(Weight::from_parts(104_580_000, 0))
			.saturating_add(T::DbWeight::get().reads(7 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Proof Skipped: ParachainStaking Round (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ParachainStaking CandidateState (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidateState (max_values: None, max_size: None, mode: Measured)
	// Storage: MultiPurposeLiquidity ReserveStatus (r:1 w:1)
	// Proof: MultiPurposeLiquidity ReserveStatus (max_values: None, max_size: Some(124), added: 2599, mode: MaxEncodedLen)
	// Storage: Tokens Accounts (r:1 w:1)
	// Proof: Tokens Accounts (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Proof Skipped: ParachainStaking Total (max_values: None, max_size: None, mode: Measured)
	fn execute_delegator_bond_less() -> Weight {
		(Weight::from_parts(100_440_000, 0))
			.saturating_add(T::DbWeight::get().reads(7 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	fn cancel_revoke_delegation() -> Weight {
		(Weight::from_parts(30_630_000, 0))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	fn cancel_delegator_bond_more() -> Weight {
		(Weight::from_parts(35_770_000, 0))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	fn cancel_delegator_bond_less() -> Weight {
		(Weight::from_parts(35_660_000, 0))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Xyk LiquidityPools (r:1 w:0)
	// Proof: Xyk LiquidityPools (max_values: None, max_size: Some(41), added: 2516, mode: MaxEncodedLen)
	// Storage: ParachainStaking StakingLiquidityTokens (r:1 w:1)
	// Proof Skipped: ParachainStaking StakingLiquidityTokens (max_values: Some(1), max_size: None, mode: Measured)
	fn add_staking_liquidity_token(x: u32, ) -> Weight {
		(Weight::from_parts(28_003_682, 0))
			// Standard Error: 2_159
			.saturating_add((Weight::from_parts(179_452, 0)).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking StakingLiquidityTokens (r:1 w:1)
	// Proof Skipped: ParachainStaking StakingLiquidityTokens (max_values: Some(1), max_size: None, mode: Measured)
	fn remove_staking_liquidity_token(x: u32, ) -> Weight {
		(Weight::from_parts(20_637_967, 0))
			// Standard Error: 1_732
			.saturating_add((Weight::from_parts(159_921, 0)).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking CandidateState (r:49 w:0)
	// Proof Skipped: ParachainStaking CandidateState (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking DelegatorState (r:1 w:0)
	// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking AggregatorMetadata (r:1 w:1)
	// Proof Skipped: ParachainStaking AggregatorMetadata (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking CandidateAggregator (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidateAggregator (max_values: Some(1), max_size: None, mode: Measured)
	fn aggregator_update_metadata() -> Weight {
		(Weight::from_parts(738_010_000, 0))
			.saturating_add(T::DbWeight::get().reads(52 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: ParachainStaking CandidateState (r:1 w:0)
	// Proof Skipped: ParachainStaking CandidateState (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking CandidateAggregator (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidateAggregator (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ParachainStaking AggregatorMetadata (r:2 w:2)
	// Proof Skipped: ParachainStaking AggregatorMetadata (max_values: None, max_size: None, mode: Measured)
	fn update_candidate_aggregator() -> Weight {
		(Weight::from_parts(97_980_000, 0))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: ParachainStaking RoundCollatorRewardInfo (r:2 w:1)
	// Proof Skipped: ParachainStaking RoundCollatorRewardInfo (max_values: None, max_size: None, mode: Measured)
	// Storage: Tokens Accounts (r:14 w:14)
	// Proof: Tokens Accounts (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
	// Storage: System Account (r:14 w:13)
	// Proof Skipped: System Account (max_values: None, max_size: None, mode: Measured)
	fn payout_collator_rewards() -> Weight {
		(Weight::from_parts(646_079_000, 0))
			.saturating_add(T::DbWeight::get().reads(30 as u64))
			.saturating_add(T::DbWeight::get().writes(28 as u64))
	}
	// Storage: ParachainStaking RoundCollatorRewardInfo (r:1 w:1)
	// Proof Skipped: ParachainStaking RoundCollatorRewardInfo (max_values: None, max_size: None, mode: Measured)
	// Storage: Tokens Accounts (r:2 w:2)
	// Proof: Tokens Accounts (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:1)
	// Proof Skipped: System Account (max_values: None, max_size: None, mode: Measured)
	fn payout_delegator_reward() -> Weight {
		(Weight::from_parts(81_750_000, 0))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: ParachainStaking Round (r:1 w:0)
	// Proof Skipped: ParachainStaking Round (max_values: Some(1), max_size: None, mode: Measured)
	fn passive_session_change() -> Weight {
		(Weight::from_parts(7_450_000, 0))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: ParachainStaking Round (r:1 w:1)
	// Proof Skipped: ParachainStaking Round (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Session CurrentIndex (r:1 w:1)
	// Proof Skipped: Session CurrentIndex (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Session QueuedChanged (r:1 w:1)
	// Proof Skipped: Session QueuedChanged (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Session QueuedKeys (r:1 w:1)
	// Proof Skipped: Session QueuedKeys (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Session DisabledValidators (r:1 w:0)
	// Proof Skipped: Session DisabledValidators (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ParachainStaking Points (r:1 w:1)
	// Proof Skipped: ParachainStaking Points (max_values: None, max_size: None, mode: Measured)
	// Storage: Issuance SessionIssuance (r:1 w:1)
	// Proof Skipped: Issuance SessionIssuance (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking RoundAggregatorInfo (r:1 w:2)
	// Proof Skipped: ParachainStaking RoundAggregatorInfo (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking AwardedPts (r:27 w:26)
	// Proof Skipped: ParachainStaking AwardedPts (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking AtStake (r:26 w:52)
	// Proof Skipped: ParachainStaking AtStake (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking CollatorCommission (r:1 w:0)
	// Proof Skipped: ParachainStaking CollatorCommission (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ParachainStaking StakingLiquidityTokens (r:1 w:1)
	// Proof Skipped: ParachainStaking StakingLiquidityTokens (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Xyk LiquidityPools (r:100 w:0)
	// Proof: Xyk LiquidityPools (max_values: None, max_size: Some(41), added: 2516, mode: MaxEncodedLen)
	// Storage: Xyk Pools (r:100 w:0)
	// Proof: Xyk Pools (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	// Storage: Tokens TotalIssuance (r:101 w:1)
	// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
	// Storage: ParachainStaking CandidatePool (r:1 w:0)
	// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ParachainStaking CandidateAggregator (r:1 w:0)
	// Proof Skipped: ParachainStaking CandidateAggregator (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ParachainStaking TotalSelected (r:1 w:0)
	// Proof Skipped: ParachainStaking TotalSelected (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ParachainStaking CandidateState (r:26 w:0)
	// Proof Skipped: ParachainStaking CandidateState (max_values: None, max_size: None, mode: Measured)
	// Storage: Issuance IssuanceConfigStore (r:1 w:0)
	// Proof Skipped: Issuance IssuanceConfigStore (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ProofOfStake PromotedPoolRewards (r:1 w:1)
	// Proof Skipped: ProofOfStake PromotedPoolRewards (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ProofOfStake TotalActivatedLiquidity (r:100 w:0)
	// Proof Skipped: ProofOfStake TotalActivatedLiquidity (max_values: None, max_size: None, mode: Measured)
	// Storage: Tokens Accounts (r:2 w:2)
	// Proof: Tokens Accounts (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
	// Storage: Session NextKeys (r:26 w:0)
	// Proof Skipped: Session NextKeys (max_values: None, max_size: None, mode: Measured)
	// Storage: Aura Authorities (r:1 w:0)
	// Proof: Aura Authorities (max_values: Some(1), max_size: Some(3200004), added: 3200499, mode: MaxEncodedLen)
	// Storage: ParachainStaking SelectedCandidates (r:0 w:1)
	// Proof Skipped: ParachainStaking SelectedCandidates (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ParachainStaking RoundCollatorRewardInfo (r:0 w:26)
	// Proof Skipped: ParachainStaking RoundCollatorRewardInfo (max_values: None, max_size: None, mode: Measured)
	// Storage: Session Validators (r:0 w:1)
	// Proof Skipped: Session Validators (max_values: Some(1), max_size: None, mode: Measured)
	fn active_session_change(x: u32, y: u32, z: u32, ) -> Weight {
		(Weight::from_parts(962_696_231, 0))
			// Standard Error: 23_712
			.saturating_add((Weight::from_parts(18_001_066, 0)).saturating_mul(x as u64))
			// Standard Error: 102_677
			.saturating_add((Weight::from_parts(5_760_381, 0)).saturating_mul(y as u64))
			// Standard Error: 242_115
			.saturating_add((Weight::from_parts(29_808_290, 0)).saturating_mul(z as u64))
			.saturating_add(T::DbWeight::get().reads(124 as u64))
			.saturating_add(T::DbWeight::get().reads((4 as u64).saturating_mul(x as u64)))
			.saturating_add(T::DbWeight::get().writes(119 as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: ParachainStaking TotalSelected (r:1 w:1)
	// Proof Skipped: ParachainStaking TotalSelected (max_values: Some(1), max_size: None, mode: Measured)
	fn set_total_selected() -> Weight {
		(Weight::from_parts(18_120_000, 0))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking CollatorCommission (r:1 w:1)
	// Proof Skipped: ParachainStaking CollatorCommission (max_values: Some(1), max_size: None, mode: Measured)
	fn set_collator_commission() -> Weight {
		(Weight::from_parts(18_170_000, 0))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking CandidateState (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidateState (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking DelegatorState (r:1 w:0)
	// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking AggregatorMetadata (r:1 w:0)
	// Proof Skipped: ParachainStaking AggregatorMetadata (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking StakingLiquidityTokens (r:1 w:0)
	// Proof Skipped: ParachainStaking StakingLiquidityTokens (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Xyk LiquidityPools (r:1 w:0)
	// Proof: Xyk LiquidityPools (max_values: None, max_size: Some(41), added: 2516, mode: MaxEncodedLen)
	// Storage: Xyk Pools (r:1 w:0)
	// Proof: Xyk Pools (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	// Storage: Tokens TotalIssuance (r:1 w:0)
	// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: MultiPurposeLiquidity ReserveStatus (r:1 w:1)
	// Proof: MultiPurposeLiquidity ReserveStatus (max_values: None, max_size: Some(124), added: 2599, mode: MaxEncodedLen)
	// Storage: Tokens Accounts (r:1 w:1)
	// Proof: Tokens Accounts (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Proof Skipped: ParachainStaking Total (max_values: None, max_size: None, mode: Measured)
	fn join_candidates(x: u32, y: u32, ) -> Weight {
		(Weight::from_parts(123_467_272, 0))
			// Standard Error: 5_457
			.saturating_add((Weight::from_parts(146_813, 0)).saturating_mul(x as u64))
			// Standard Error: 2_600
			.saturating_add((Weight::from_parts(190_628, 0)).saturating_mul(y as u64))
			.saturating_add(RocksDbWeight::get().reads(11 as u64))
			.saturating_add(RocksDbWeight::get().writes(5 as u64))
	}
	// Storage: ParachainStaking CandidateState (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidateState (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Proof Skipped: ParachainStaking Round (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	fn schedule_leave_candidates(x: u32, ) -> Weight {
		(Weight::from_parts(39_282_701, 0))
			// Standard Error: 2_623
			.saturating_add((Weight::from_parts(167_522, 0)).saturating_mul(x as u64))
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: ParachainStaking CandidateState (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidateState (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Proof Skipped: ParachainStaking Round (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: MultiPurposeLiquidity ReserveStatus (r:25 w:25)
	// Proof: MultiPurposeLiquidity ReserveStatus (max_values: None, max_size: Some(124), added: 2599, mode: MaxEncodedLen)
	// Storage: Tokens Accounts (r:25 w:25)
	// Proof: Tokens Accounts (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
	// Storage: ParachainStaking DelegatorState (r:24 w:24)
	// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking CandidateAggregator (r:1 w:0)
	// Proof Skipped: ParachainStaking CandidateAggregator (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Proof Skipped: ParachainStaking Total (max_values: None, max_size: None, mode: Measured)
	fn execute_leave_candidates(x: u32, ) -> Weight {
		(Weight::from_parts(60_685_134, 0))
			// Standard Error: 31_073
			.saturating_add((Weight::from_parts(31_446_338, 0)).saturating_mul(x as u64))
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().reads((3 as u64).saturating_mul(x as u64)))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
			.saturating_add(RocksDbWeight::get().writes((3 as u64).saturating_mul(x as u64)))
	}
	// Storage: ParachainStaking CandidateState (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidateState (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	fn cancel_leave_candidates(x: u32, ) -> Weight {
		(Weight::from_parts(37_579_077, 0))
			// Standard Error: 2_367
			.saturating_add((Weight::from_parts(161_581, 0)).saturating_mul(x as u64))
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: ParachainStaking CandidateState (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidateState (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Proof Skipped: ParachainStaking Round (max_values: Some(1), max_size: None, mode: Measured)
	fn go_offline() -> Weight {
		(Weight::from_parts(38_880_000, 0))
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: ParachainStaking CandidateState (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidateState (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Proof Skipped: ParachainStaking Round (max_values: Some(1), max_size: None, mode: Measured)
	fn go_online() -> Weight {
		(Weight::from_parts(38_290_000, 0))
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: ParachainStaking CandidateState (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidateState (max_values: None, max_size: None, mode: Measured)
	// Storage: MultiPurposeLiquidity ReserveStatus (r:1 w:0)
	// Proof: MultiPurposeLiquidity ReserveStatus (max_values: None, max_size: Some(124), added: 2599, mode: MaxEncodedLen)
	// Storage: Tokens Accounts (r:1 w:0)
	// Proof: Tokens Accounts (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Proof Skipped: ParachainStaking Round (max_values: Some(1), max_size: None, mode: Measured)
	fn schedule_candidate_bond_more() -> Weight {
		(Weight::from_parts(55_150_000, 0))
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking CandidateState (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidateState (max_values: None, max_size: None, mode: Measured)
	// Storage: Xyk LiquidityPools (r:1 w:0)
	// Proof: Xyk LiquidityPools (max_values: None, max_size: Some(41), added: 2516, mode: MaxEncodedLen)
	// Storage: Xyk Pools (r:1 w:0)
	// Proof: Xyk Pools (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	// Storage: Tokens TotalIssuance (r:1 w:0)
	// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Proof Skipped: ParachainStaking Round (max_values: Some(1), max_size: None, mode: Measured)
	fn schedule_candidate_bond_less() -> Weight {
		(Weight::from_parts(57_430_000, 0))
			.saturating_add(RocksDbWeight::get().reads(5 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking CandidateState (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidateState (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Proof Skipped: ParachainStaking Round (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: MultiPurposeLiquidity ReserveStatus (r:1 w:1)
	// Proof: MultiPurposeLiquidity ReserveStatus (max_values: None, max_size: Some(124), added: 2599, mode: MaxEncodedLen)
	// Storage: Tokens Accounts (r:1 w:1)
	// Proof: Tokens Accounts (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Proof Skipped: ParachainStaking Total (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	fn execute_candidate_bond_more() -> Weight {
		(Weight::from_parts(89_831_000, 0))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(5 as u64))
	}
	// Storage: ParachainStaking CandidateState (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidateState (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Proof Skipped: ParachainStaking Round (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: MultiPurposeLiquidity ReserveStatus (r:1 w:1)
	// Proof: MultiPurposeLiquidity ReserveStatus (max_values: None, max_size: Some(124), added: 2599, mode: MaxEncodedLen)
	// Storage: Tokens Accounts (r:1 w:1)
	// Proof: Tokens Accounts (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Proof Skipped: ParachainStaking Total (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	fn execute_candidate_bond_less() -> Weight {
		(Weight::from_parts(85_290_000, 0))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(5 as u64))
	}
	// Storage: ParachainStaking CandidateState (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidateState (max_values: None, max_size: None, mode: Measured)
	fn cancel_candidate_bond_more() -> Weight {
		(Weight::from_parts(29_900_000, 0))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking CandidateState (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidateState (max_values: None, max_size: None, mode: Measured)
	fn cancel_candidate_bond_less() -> Weight {
		(Weight::from_parts(29_190_000, 0))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking AggregatorMetadata (r:1 w:0)
	// Proof Skipped: ParachainStaking AggregatorMetadata (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking CandidateState (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidateState (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	// Storage: Xyk LiquidityPools (r:1 w:0)
	// Proof: Xyk LiquidityPools (max_values: None, max_size: Some(41), added: 2516, mode: MaxEncodedLen)
	// Storage: Xyk Pools (r:1 w:0)
	// Proof: Xyk Pools (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	// Storage: Tokens TotalIssuance (r:1 w:0)
	// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
	// Storage: MultiPurposeLiquidity ReserveStatus (r:1 w:1)
	// Proof: MultiPurposeLiquidity ReserveStatus (max_values: None, max_size: Some(124), added: 2599, mode: MaxEncodedLen)
	// Storage: Tokens Accounts (r:1 w:1)
	// Proof: Tokens Accounts (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Proof Skipped: ParachainStaking Total (max_values: None, max_size: None, mode: Measured)
	fn delegate(x: u32, y: u32, ) -> Weight {
		(Weight::from_parts(126_644_715, 0))
			// Standard Error: 7_517
			.saturating_add((Weight::from_parts(346_672, 0)).saturating_mul(x as u64))
			// Standard Error: 19_666
			.saturating_add((Weight::from_parts(396_238, 0)).saturating_mul(y as u64))
			.saturating_add(RocksDbWeight::get().reads(10 as u64))
			.saturating_add(RocksDbWeight::get().writes(6 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Proof Skipped: ParachainStaking Round (max_values: Some(1), max_size: None, mode: Measured)
	fn schedule_leave_delegators() -> Weight {
		(Weight::from_parts(32_340_000, 0))
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Proof Skipped: ParachainStaking Round (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ParachainStaking CandidateState (r:29 w:29)
	// Proof Skipped: ParachainStaking CandidateState (max_values: None, max_size: None, mode: Measured)
	// Storage: MultiPurposeLiquidity ReserveStatus (r:1 w:1)
	// Proof: MultiPurposeLiquidity ReserveStatus (max_values: None, max_size: Some(124), added: 2599, mode: MaxEncodedLen)
	// Storage: Tokens Accounts (r:1 w:1)
	// Proof: Tokens Accounts (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Proof Skipped: ParachainStaking Total (max_values: None, max_size: None, mode: Measured)
	fn execute_leave_delegators(x: u32, ) -> Weight {
		(Weight::from_parts(24_536_934, 0))
			// Standard Error: 26_983
			.saturating_add((Weight::from_parts(37_923_839, 0)).saturating_mul(x as u64))
			.saturating_add(RocksDbWeight::get().reads(5 as u64))
			.saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(x as u64)))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
			.saturating_add(RocksDbWeight::get().writes((1 as u64).saturating_mul(x as u64)))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	fn cancel_leave_delegators() -> Weight {
		(Weight::from_parts(30_410_000, 0))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Proof Skipped: ParachainStaking Round (max_values: Some(1), max_size: None, mode: Measured)
	fn schedule_revoke_delegation() -> Weight {
		(Weight::from_parts(33_440_000, 0))
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	// Storage: MultiPurposeLiquidity ReserveStatus (r:1 w:0)
	// Proof: MultiPurposeLiquidity ReserveStatus (max_values: None, max_size: Some(124), added: 2599, mode: MaxEncodedLen)
	// Storage: Tokens Accounts (r:1 w:0)
	// Proof: Tokens Accounts (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Proof Skipped: ParachainStaking Round (max_values: Some(1), max_size: None, mode: Measured)
	fn schedule_delegator_bond_more() -> Weight {
		(Weight::from_parts(56_360_000, 0))
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Proof Skipped: ParachainStaking Round (max_values: Some(1), max_size: None, mode: Measured)
	fn schedule_delegator_bond_less() -> Weight {
		(Weight::from_parts(33_850_000, 0))
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Proof Skipped: ParachainStaking Round (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ParachainStaking CandidateState (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidateState (max_values: None, max_size: None, mode: Measured)
	// Storage: MultiPurposeLiquidity ReserveStatus (r:1 w:1)
	// Proof: MultiPurposeLiquidity ReserveStatus (max_values: None, max_size: Some(124), added: 2599, mode: MaxEncodedLen)
	// Storage: Tokens Accounts (r:1 w:1)
	// Proof: Tokens Accounts (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Proof Skipped: ParachainStaking Total (max_values: None, max_size: None, mode: Measured)
	fn execute_revoke_delegation() -> Weight {
		(Weight::from_parts(110_750_000, 0))
			.saturating_add(RocksDbWeight::get().reads(7 as u64))
			.saturating_add(RocksDbWeight::get().writes(6 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Proof Skipped: ParachainStaking Round (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ParachainStaking CandidateState (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidateState (max_values: None, max_size: None, mode: Measured)
	// Storage: MultiPurposeLiquidity ReserveStatus (r:1 w:1)
	// Proof: MultiPurposeLiquidity ReserveStatus (max_values: None, max_size: Some(124), added: 2599, mode: MaxEncodedLen)
	// Storage: Tokens Accounts (r:1 w:1)
	// Proof: Tokens Accounts (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Proof Skipped: ParachainStaking Total (max_values: None, max_size: None, mode: Measured)
	fn execute_delegator_bond_more() -> Weight {
		(Weight::from_parts(104_580_000, 0))
			.saturating_add(RocksDbWeight::get().reads(7 as u64))
			.saturating_add(RocksDbWeight::get().writes(6 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Proof Skipped: ParachainStaking Round (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ParachainStaking CandidateState (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidateState (max_values: None, max_size: None, mode: Measured)
	// Storage: MultiPurposeLiquidity ReserveStatus (r:1 w:1)
	// Proof: MultiPurposeLiquidity ReserveStatus (max_values: None, max_size: Some(124), added: 2599, mode: MaxEncodedLen)
	// Storage: Tokens Accounts (r:1 w:1)
	// Proof: Tokens Accounts (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Proof Skipped: ParachainStaking Total (max_values: None, max_size: None, mode: Measured)
	fn execute_delegator_bond_less() -> Weight {
		(Weight::from_parts(100_440_000, 0))
			.saturating_add(RocksDbWeight::get().reads(7 as u64))
			.saturating_add(RocksDbWeight::get().writes(6 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	fn cancel_revoke_delegation() -> Weight {
		(Weight::from_parts(30_630_000, 0))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	fn cancel_delegator_bond_more() -> Weight {
		(Weight::from_parts(35_770_000, 0))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	fn cancel_delegator_bond_less() -> Weight {
		(Weight::from_parts(35_660_000, 0))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Xyk LiquidityPools (r:1 w:0)
	// Proof: Xyk LiquidityPools (max_values: None, max_size: Some(41), added: 2516, mode: MaxEncodedLen)
	// Storage: ParachainStaking StakingLiquidityTokens (r:1 w:1)
	// Proof Skipped: ParachainStaking StakingLiquidityTokens (max_values: Some(1), max_size: None, mode: Measured)
	fn add_staking_liquidity_token(x: u32, ) -> Weight {
		(Weight::from_parts(28_003_682, 0))
			// Standard Error: 2_159
			.saturating_add((Weight::from_parts(179_452, 0)).saturating_mul(x as u64))
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking StakingLiquidityTokens (r:1 w:1)
	// Proof Skipped: ParachainStaking StakingLiquidityTokens (max_values: Some(1), max_size: None, mode: Measured)
	fn remove_staking_liquidity_token(x: u32, ) -> Weight {
		(Weight::from_parts(20_637_967, 0))
			// Standard Error: 1_732
			.saturating_add((Weight::from_parts(159_921, 0)).saturating_mul(x as u64))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking CandidateState (r:49 w:0)
	// Proof Skipped: ParachainStaking CandidateState (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking DelegatorState (r:1 w:0)
	// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking AggregatorMetadata (r:1 w:1)
	// Proof Skipped: ParachainStaking AggregatorMetadata (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking CandidateAggregator (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidateAggregator (max_values: Some(1), max_size: None, mode: Measured)
	fn aggregator_update_metadata() -> Weight {
		(Weight::from_parts(738_010_000, 0))
			.saturating_add(RocksDbWeight::get().reads(52 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: ParachainStaking CandidateState (r:1 w:0)
	// Proof Skipped: ParachainStaking CandidateState (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking CandidateAggregator (r:1 w:1)
	// Proof Skipped: ParachainStaking CandidateAggregator (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ParachainStaking AggregatorMetadata (r:2 w:2)
	// Proof Skipped: ParachainStaking AggregatorMetadata (max_values: None, max_size: None, mode: Measured)
	fn update_candidate_aggregator() -> Weight {
		(Weight::from_parts(97_980_000, 0))
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: ParachainStaking RoundCollatorRewardInfo (r:2 w:1)
	// Proof Skipped: ParachainStaking RoundCollatorRewardInfo (max_values: None, max_size: None, mode: Measured)
	// Storage: Tokens Accounts (r:14 w:14)
	// Proof: Tokens Accounts (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
	// Storage: System Account (r:14 w:13)
	// Proof Skipped: System Account (max_values: None, max_size: None, mode: Measured)
	fn payout_collator_rewards() -> Weight {
		(Weight::from_parts(646_079_000, 0))
			.saturating_add(RocksDbWeight::get().reads(30 as u64))
			.saturating_add(RocksDbWeight::get().writes(28 as u64))
	}
	// Storage: ParachainStaking RoundCollatorRewardInfo (r:1 w:1)
	// Proof Skipped: ParachainStaking RoundCollatorRewardInfo (max_values: None, max_size: None, mode: Measured)
	// Storage: Tokens Accounts (r:2 w:2)
	// Proof: Tokens Accounts (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:1)
	// Proof Skipped: System Account (max_values: None, max_size: None, mode: Measured)
	fn payout_delegator_reward() -> Weight {
		(Weight::from_parts(81_750_000, 0))
			.saturating_add(RocksDbWeight::get().reads(5 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
	// Storage: ParachainStaking Round (r:1 w:0)
	// Proof Skipped: ParachainStaking Round (max_values: Some(1), max_size: None, mode: Measured)
	fn passive_session_change() -> Weight {
		(Weight::from_parts(7_450_000, 0))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
	}
	// Storage: ParachainStaking Round (r:1 w:1)
	// Proof Skipped: ParachainStaking Round (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Session CurrentIndex (r:1 w:1)
	// Proof Skipped: Session CurrentIndex (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Session QueuedChanged (r:1 w:1)
	// Proof Skipped: Session QueuedChanged (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Session QueuedKeys (r:1 w:1)
	// Proof Skipped: Session QueuedKeys (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Session DisabledValidators (r:1 w:0)
	// Proof Skipped: Session DisabledValidators (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ParachainStaking Points (r:1 w:1)
	// Proof Skipped: ParachainStaking Points (max_values: None, max_size: None, mode: Measured)
	// Storage: Issuance SessionIssuance (r:1 w:1)
	// Proof Skipped: Issuance SessionIssuance (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking RoundAggregatorInfo (r:1 w:2)
	// Proof Skipped: ParachainStaking RoundAggregatorInfo (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking AwardedPts (r:27 w:26)
	// Proof Skipped: ParachainStaking AwardedPts (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking AtStake (r:26 w:52)
	// Proof Skipped: ParachainStaking AtStake (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainStaking CollatorCommission (r:1 w:0)
	// Proof Skipped: ParachainStaking CollatorCommission (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ParachainStaking StakingLiquidityTokens (r:1 w:1)
	// Proof Skipped: ParachainStaking StakingLiquidityTokens (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Xyk LiquidityPools (r:100 w:0)
	// Proof: Xyk LiquidityPools (max_values: None, max_size: Some(41), added: 2516, mode: MaxEncodedLen)
	// Storage: Xyk Pools (r:100 w:0)
	// Proof: Xyk Pools (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	// Storage: Tokens TotalIssuance (r:101 w:1)
	// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
	// Storage: ParachainStaking CandidatePool (r:1 w:0)
	// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ParachainStaking CandidateAggregator (r:1 w:0)
	// Proof Skipped: ParachainStaking CandidateAggregator (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ParachainStaking TotalSelected (r:1 w:0)
	// Proof Skipped: ParachainStaking TotalSelected (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ParachainStaking CandidateState (r:26 w:0)
	// Proof Skipped: ParachainStaking CandidateState (max_values: None, max_size: None, mode: Measured)
	// Storage: Issuance IssuanceConfigStore (r:1 w:0)
	// Proof Skipped: Issuance IssuanceConfigStore (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ProofOfStake PromotedPoolRewards (r:1 w:1)
	// Proof Skipped: ProofOfStake PromotedPoolRewards (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ProofOfStake TotalActivatedLiquidity (r:100 w:0)
	// Proof Skipped: ProofOfStake TotalActivatedLiquidity (max_values: None, max_size: None, mode: Measured)
	// Storage: Tokens Accounts (r:2 w:2)
	// Proof: Tokens Accounts (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
	// Storage: Session NextKeys (r:26 w:0)
	// Proof Skipped: Session NextKeys (max_values: None, max_size: None, mode: Measured)
	// Storage: Aura Authorities (r:1 w:0)
	// Proof: Aura Authorities (max_values: Some(1), max_size: Some(3200004), added: 3200499, mode: MaxEncodedLen)
	// Storage: ParachainStaking SelectedCandidates (r:0 w:1)
	// Proof Skipped: ParachainStaking SelectedCandidates (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ParachainStaking RoundCollatorRewardInfo (r:0 w:26)
	// Proof Skipped: ParachainStaking RoundCollatorRewardInfo (max_values: None, max_size: None, mode: Measured)
	// Storage: Session Validators (r:0 w:1)
	// Proof Skipped: Session Validators (max_values: Some(1), max_size: None, mode: Measured)
	fn active_session_change(x: u32, y: u32, z: u32, ) -> Weight {
		(Weight::from_parts(962_696_231, 0))
			// Standard Error: 23_712
			.saturating_add((Weight::from_parts(18_001_066, 0)).saturating_mul(x as u64))
			// Standard Error: 102_677
			.saturating_add((Weight::from_parts(5_760_381, 0)).saturating_mul(y as u64))
			// Standard Error: 242_115
			.saturating_add((Weight::from_parts(29_808_290, 0)).saturating_mul(z as u64))
			.saturating_add(RocksDbWeight::get().reads(124 as u64))
			.saturating_add(RocksDbWeight::get().reads((4 as u64).saturating_mul(x as u64)))
			.saturating_add(RocksDbWeight::get().writes(119 as u64))
	}
}
