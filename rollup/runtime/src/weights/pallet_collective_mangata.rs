// This file is part of Mangata.

// Copyright (C) 2020-2022 Mangata Foundation.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_collective_mangata
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-01-09, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("mangata-kusama"), DB CACHE: 1024

// Executed Command:
// target/release/mangata-node
// benchmark
// pallet
// -l=info,runtime::collective=warn,xyk=warn
// --chain
// mangata-kusama
// --execution
// wasm
// --wasm-execution
// compiled
// --pallet
// *
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --template
// ./templates/module-weight-template.hbs
// --output
// ./benchmarks/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_collective_mangata.
pub trait WeightInfo {
	fn set_members(m: u32, n: u32, p: u32, ) -> Weight;
	fn execute(b: u32, m: u32, ) -> Weight;
	fn propose_execute(b: u32, m: u32, ) -> Weight;
	fn propose_proposed(b: u32, m: u32, p: u32, ) -> Weight;
	fn vote(m: u32, ) -> Weight;
	fn close_early_disapproved(m: u32, p: u32, ) -> Weight;
	fn close_early_approved(b: u32, m: u32, p: u32, ) -> Weight;
	fn close_disapproved(m: u32, p: u32, ) -> Weight;
	fn close_approved(b: u32, m: u32, p: u32, ) -> Weight;
	fn disapprove_proposal(p: u32, ) -> Weight;
}

/// Weights for pallet_collective_mangata using the Mangata node and recommended hardware.
pub struct ModuleWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_collective_mangata::WeightInfo for ModuleWeight<T> {
	// Storage: `Council::Members` (r:1 w:1)
	// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::Proposals` (r:1 w:0)
	// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::Voting` (r:100 w:100)
	// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::Prime` (r:0 w:1)
	// Proof: `Council::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_members(m: u32, _n: u32, p: u32, ) -> Weight {
		(Weight::from_parts(49_500_000, 0))
			// Standard Error: 70_155
			.saturating_add((Weight::from_parts(4_698_580, 0)).saturating_mul(m as u64))
			// Standard Error: 70_155
			.saturating_add((Weight::from_parts(9_659_834, 0)).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(p as u64)))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(p as u64)))
	}
	// Storage: `Council::Members` (r:1 w:0)
	// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn execute(b: u32, m: u32, ) -> Weight {
		(Weight::from_parts(29_220_221, 0))
			// Standard Error: 140
			.saturating_add((Weight::from_parts(2_429, 0)).saturating_mul(b as u64))
			// Standard Error: 1_443
			.saturating_add((Weight::from_parts(4_412, 0)).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: `Council::Members` (r:1 w:0)
	// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalOf` (r:1 w:0)
	// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn propose_execute(b: u32, m: u32, ) -> Weight {
		(Weight::from_parts(31_829_788, 0))
			// Standard Error: 151
			.saturating_add((Weight::from_parts(2_231, 0)).saturating_mul(b as u64))
			// Standard Error: 1_557
			.saturating_add((Weight::from_parts(35_246, 0)).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
	}
	// Storage: `Council::Members` (r:1 w:0)
	// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalOf` (r:1 w:1)
	// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::Proposals` (r:1 w:1)
	// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalCount` (r:1 w:1)
	// Proof: `Council::ProposalCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalProposedTime` (r:0 w:1)
	// Proof: `Council::ProposalProposedTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::Voting` (r:0 w:1)
	// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn propose_proposed(b: u32, m: u32, p: u32, ) -> Weight {
		(Weight::from_parts(46_091_730, 0))
			// Standard Error: 319
			.saturating_add((Weight::from_parts(5_410, 0)).saturating_mul(b as u64))
			// Standard Error: 3_332
			.saturating_add((Weight::from_parts(14_379, 0)).saturating_mul(m as u64))
			// Standard Error: 3_289
			.saturating_add((Weight::from_parts(307_260, 0)).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: `Council::Members` (r:1 w:0)
	// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::Voting` (r:1 w:1)
	// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn vote(m: u32, ) -> Weight {
		(Weight::from_parts(43_669_294, 0))
			// Standard Error: 2_626
			.saturating_add((Weight::from_parts(43_911, 0)).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: `Council::Members` (r:1 w:0)
	// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::Voting` (r:1 w:1)
	// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalProposedTime` (r:1 w:1)
	// Proof: `Council::ProposalProposedTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::Proposals` (r:1 w:1)
	// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalOf` (r:0 w:1)
	// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn close_early_disapproved(m: u32, p: u32, ) -> Weight {
		(Weight::from_parts(62_669_590, 0))
			// Standard Error: 4_434
			.saturating_add((Weight::from_parts(61_080, 0)).saturating_mul(m as u64))
			// Standard Error: 4_324
			.saturating_add((Weight::from_parts(335_148, 0)).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: `Council::Members` (r:1 w:0)
	// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::Voting` (r:1 w:1)
	// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalProposedTime` (r:1 w:1)
	// Proof: `Council::ProposalProposedTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalOf` (r:1 w:1)
	// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::Proposals` (r:1 w:1)
	// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn close_early_approved(b: u32, m: u32, p: u32, ) -> Weight {
		(Weight::from_parts(93_764_711, 0))
			// Standard Error: 617
			.saturating_add((Weight::from_parts(4_363, 0)).saturating_mul(b as u64))
			// Standard Error: 6_521
			.saturating_add((Weight::from_parts(10_992, 0)).saturating_mul(m as u64))
			// Standard Error: 6_357
			.saturating_add((Weight::from_parts(342_855, 0)).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: `Council::Members` (r:1 w:0)
	// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::Voting` (r:1 w:1)
	// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalProposedTime` (r:1 w:1)
	// Proof: `Council::ProposalProposedTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::Prime` (r:1 w:0)
	// Proof: `Council::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::Proposals` (r:1 w:1)
	// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalOf` (r:0 w:1)
	// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn close_disapproved(m: u32, p: u32, ) -> Weight {
		(Weight::from_parts(70_879_635, 0))
			// Standard Error: 4_851
			.saturating_add((Weight::from_parts(35_945, 0)).saturating_mul(m as u64))
			// Standard Error: 4_730
			.saturating_add((Weight::from_parts(309_764, 0)).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: `Council::Members` (r:1 w:0)
	// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::Voting` (r:1 w:1)
	// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalProposedTime` (r:1 w:1)
	// Proof: `Council::ProposalProposedTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::Prime` (r:1 w:0)
	// Proof: `Council::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalOf` (r:1 w:1)
	// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::Proposals` (r:1 w:1)
	// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn close_approved(b: u32, m: u32, p: u32, ) -> Weight {
		(Weight::from_parts(88_548_132, 0))
			// Standard Error: 616
			.saturating_add((Weight::from_parts(8_945, 0)).saturating_mul(b as u64))
			// Standard Error: 6_515
			.saturating_add((Weight::from_parts(53_020, 0)).saturating_mul(m as u64))
			// Standard Error: 6_351
			.saturating_add((Weight::from_parts(379_369, 0)).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: `Council::Proposals` (r:1 w:1)
	// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalProposedTime` (r:0 w:1)
	// Proof: `Council::ProposalProposedTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::Voting` (r:0 w:1)
	// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalOf` (r:0 w:1)
	// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn disapprove_proposal(p: u32, ) -> Weight {
		(Weight::from_parts(35_334_531, 0))
			// Standard Error: 3_100
			.saturating_add((Weight::from_parts(261_922, 0)).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: `Council::Members` (r:1 w:1)
	// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::Proposals` (r:1 w:0)
	// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::Voting` (r:100 w:100)
	// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::Prime` (r:0 w:1)
	// Proof: `Council::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_members(m: u32, _n: u32, p: u32, ) -> Weight {
		(Weight::from_parts(49_500_000, 0))
			// Standard Error: 70_155
			.saturating_add((Weight::from_parts(4_698_580, 0)).saturating_mul(m as u64))
			// Standard Error: 70_155
			.saturating_add((Weight::from_parts(9_659_834, 0)).saturating_mul(p as u64))
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(p as u64)))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
			.saturating_add(RocksDbWeight::get().writes((1 as u64).saturating_mul(p as u64)))
	}
	// Storage: `Council::Members` (r:1 w:0)
	// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn execute(b: u32, m: u32, ) -> Weight {
		(Weight::from_parts(29_220_221, 0))
			// Standard Error: 140
			.saturating_add((Weight::from_parts(2_429, 0)).saturating_mul(b as u64))
			// Standard Error: 1_443
			.saturating_add((Weight::from_parts(4_412, 0)).saturating_mul(m as u64))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
	}
	// Storage: `Council::Members` (r:1 w:0)
	// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalOf` (r:1 w:0)
	// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn propose_execute(b: u32, m: u32, ) -> Weight {
		(Weight::from_parts(31_829_788, 0))
			// Standard Error: 151
			.saturating_add((Weight::from_parts(2_231, 0)).saturating_mul(b as u64))
			// Standard Error: 1_557
			.saturating_add((Weight::from_parts(35_246, 0)).saturating_mul(m as u64))
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
	}
	// Storage: `Council::Members` (r:1 w:0)
	// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalOf` (r:1 w:1)
	// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::Proposals` (r:1 w:1)
	// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalCount` (r:1 w:1)
	// Proof: `Council::ProposalCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalProposedTime` (r:0 w:1)
	// Proof: `Council::ProposalProposedTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::Voting` (r:0 w:1)
	// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn propose_proposed(b: u32, m: u32, p: u32, ) -> Weight {
		(Weight::from_parts(46_091_730, 0))
			// Standard Error: 319
			.saturating_add((Weight::from_parts(5_410, 0)).saturating_mul(b as u64))
			// Standard Error: 3_332
			.saturating_add((Weight::from_parts(14_379, 0)).saturating_mul(m as u64))
			// Standard Error: 3_289
			.saturating_add((Weight::from_parts(307_260, 0)).saturating_mul(p as u64))
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().writes(5 as u64))
	}
	// Storage: `Council::Members` (r:1 w:0)
	// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::Voting` (r:1 w:1)
	// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn vote(m: u32, ) -> Weight {
		(Weight::from_parts(43_669_294, 0))
			// Standard Error: 2_626
			.saturating_add((Weight::from_parts(43_911, 0)).saturating_mul(m as u64))
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: `Council::Members` (r:1 w:0)
	// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::Voting` (r:1 w:1)
	// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalProposedTime` (r:1 w:1)
	// Proof: `Council::ProposalProposedTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::Proposals` (r:1 w:1)
	// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalOf` (r:0 w:1)
	// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn close_early_disapproved(m: u32, p: u32, ) -> Weight {
		(Weight::from_parts(62_669_590, 0))
			// Standard Error: 4_434
			.saturating_add((Weight::from_parts(61_080, 0)).saturating_mul(m as u64))
			// Standard Error: 4_324
			.saturating_add((Weight::from_parts(335_148, 0)).saturating_mul(p as u64))
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
	// Storage: `Council::Members` (r:1 w:0)
	// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::Voting` (r:1 w:1)
	// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalProposedTime` (r:1 w:1)
	// Proof: `Council::ProposalProposedTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalOf` (r:1 w:1)
	// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::Proposals` (r:1 w:1)
	// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn close_early_approved(b: u32, m: u32, p: u32, ) -> Weight {
		(Weight::from_parts(93_764_711, 0))
			// Standard Error: 617
			.saturating_add((Weight::from_parts(4_363, 0)).saturating_mul(b as u64))
			// Standard Error: 6_521
			.saturating_add((Weight::from_parts(10_992, 0)).saturating_mul(m as u64))
			// Standard Error: 6_357
			.saturating_add((Weight::from_parts(342_855, 0)).saturating_mul(p as u64))
			.saturating_add(RocksDbWeight::get().reads(5 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
	// Storage: `Council::Members` (r:1 w:0)
	// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::Voting` (r:1 w:1)
	// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalProposedTime` (r:1 w:1)
	// Proof: `Council::ProposalProposedTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::Prime` (r:1 w:0)
	// Proof: `Council::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::Proposals` (r:1 w:1)
	// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalOf` (r:0 w:1)
	// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn close_disapproved(m: u32, p: u32, ) -> Weight {
		(Weight::from_parts(70_879_635, 0))
			// Standard Error: 4_851
			.saturating_add((Weight::from_parts(35_945, 0)).saturating_mul(m as u64))
			// Standard Error: 4_730
			.saturating_add((Weight::from_parts(309_764, 0)).saturating_mul(p as u64))
			.saturating_add(RocksDbWeight::get().reads(5 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
	// Storage: `Council::Members` (r:1 w:0)
	// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::Voting` (r:1 w:1)
	// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalProposedTime` (r:1 w:1)
	// Proof: `Council::ProposalProposedTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::Prime` (r:1 w:0)
	// Proof: `Council::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalOf` (r:1 w:1)
	// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::Proposals` (r:1 w:1)
	// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn close_approved(b: u32, m: u32, p: u32, ) -> Weight {
		(Weight::from_parts(88_548_132, 0))
			// Standard Error: 616
			.saturating_add((Weight::from_parts(8_945, 0)).saturating_mul(b as u64))
			// Standard Error: 6_515
			.saturating_add((Weight::from_parts(53_020, 0)).saturating_mul(m as u64))
			// Standard Error: 6_351
			.saturating_add((Weight::from_parts(379_369, 0)).saturating_mul(p as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
	// Storage: `Council::Proposals` (r:1 w:1)
	// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalProposedTime` (r:0 w:1)
	// Proof: `Council::ProposalProposedTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::Voting` (r:0 w:1)
	// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalOf` (r:0 w:1)
	// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn disapprove_proposal(p: u32, ) -> Weight {
		(Weight::from_parts(35_334_531, 0))
			// Standard Error: 3_100
			.saturating_add((Weight::from_parts(261_922, 0)).saturating_mul(p as u64))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
}
