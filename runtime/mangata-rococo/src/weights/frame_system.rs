// This file is part of Mangata.

// Copyright (C) 2020-2022 Mangata Foundation.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for frame_system
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-18, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("kusama"), DB CACHE: 1024

// Executed Command:
// target/release/mangata-node
// benchmark
// pallet
// -l=info,xyk=error,collective-mangata=warn,bootstrap=warn
// --chain
// kusama
// --execution
// wasm
// --wasm-execution
// compiled
// --pallet
// *
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --template
// ./templates/module-weight-template.hbs
// --output
// ./benchmarks/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for frame_system.
pub trait WeightInfo {
	fn remark(b: u32, ) -> Weight;
	fn remark_with_event(b: u32, ) -> Weight;
	fn set_heap_pages() -> Weight;
	fn set_storage(i: u32, ) -> Weight;
	fn kill_storage(i: u32, ) -> Weight;
	fn kill_prefix(p: u32, ) -> Weight;
}

/// Weights for frame_system using the Mangata node and recommended hardware.
pub struct ModuleWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> frame_system::WeightInfo for ModuleWeight<T> {
	fn remark(b: u32, ) -> Weight {
		(Weight::from_parts(10_114_579, 0))
			// Standard Error: 0
			.saturating_add((Weight::from_parts(518, 0)).saturating_mul(b as u64))
	}
	fn remark_with_event(b: u32, ) -> Weight {
		(Weight::from_parts(30_615_946, 0))
			// Standard Error: 0
			.saturating_add((Weight::from_parts(1_708, 0)).saturating_mul(b as u64))
	}
	// Storage: System Digest (r:1 w:1)
	// Proof Skipped: System Digest (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: unknown `0x3a686561707061676573` (r:0 w:1)
	// Proof Skipped: unknown `0x3a686561707061676573` (r:0 w:1)
	fn set_heap_pages() -> Weight {
		(Weight::from_parts(7_640_000, 0))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	// Proof Skipped: Skipped Metadata (max_values: None, max_size: None, mode: Measured)
	fn set_storage(i: u32, ) -> Weight {
		(Weight::from_parts(4_030_000, 0))
			// Standard Error: 2_557
			.saturating_add((Weight::from_parts(1_227_455, 0)).saturating_mul(i as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(i as u64)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	// Proof Skipped: Skipped Metadata (max_values: None, max_size: None, mode: Measured)
	fn kill_storage(i: u32, ) -> Weight {
		(Weight::from_parts(4_170_000, 0))
			// Standard Error: 1_127
			.saturating_add((Weight::from_parts(837_671, 0)).saturating_mul(i as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(i as u64)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	// Proof Skipped: Skipped Metadata (max_values: None, max_size: None, mode: Measured)
	fn kill_prefix(p: u32, ) -> Weight {
		(Weight::from_parts(7_530_000, 0))
			// Standard Error: 1_363
			.saturating_add((Weight::from_parts(1_454_847, 0)).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(p as u64)))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(p as u64)))
	}

	fn set_code() -> Weight {
		Weight::from_parts(0, 0)
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn remark(b: u32, ) -> Weight {
		(Weight::from_parts(10_114_579, 0))
			// Standard Error: 0
			.saturating_add((Weight::from_parts(518, 0)).saturating_mul(b as u64))
	}
	fn remark_with_event(b: u32, ) -> Weight {
		(Weight::from_parts(30_615_946, 0))
			// Standard Error: 0
			.saturating_add((Weight::from_parts(1_708, 0)).saturating_mul(b as u64))
	}
	// Storage: System Digest (r:1 w:1)
	// Proof Skipped: System Digest (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: unknown `0x3a686561707061676573` (r:0 w:1)
	// Proof Skipped: unknown `0x3a686561707061676573` (r:0 w:1)
	fn set_heap_pages() -> Weight {
		(Weight::from_parts(7_640_000, 0))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	// Proof Skipped: Skipped Metadata (max_values: None, max_size: None, mode: Measured)
	fn set_storage(i: u32, ) -> Weight {
		(Weight::from_parts(4_030_000, 0))
			// Standard Error: 2_557
			.saturating_add((Weight::from_parts(1_227_455, 0)).saturating_mul(i as u64))
			.saturating_add(RocksDbWeight::get().writes((1 as u64).saturating_mul(i as u64)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	// Proof Skipped: Skipped Metadata (max_values: None, max_size: None, mode: Measured)
	fn kill_storage(i: u32, ) -> Weight {
		(Weight::from_parts(4_170_000, 0))
			// Standard Error: 1_127
			.saturating_add((Weight::from_parts(837_671, 0)).saturating_mul(i as u64))
			.saturating_add(RocksDbWeight::get().writes((1 as u64).saturating_mul(i as u64)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	// Proof Skipped: Skipped Metadata (max_values: None, max_size: None, mode: Measured)
	fn kill_prefix(p: u32, ) -> Weight {
		(Weight::from_parts(7_530_000, 0))
			// Standard Error: 1_363
			.saturating_add((Weight::from_parts(1_454_847, 0)).saturating_mul(p as u64))
			.saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(p as u64)))
			.saturating_add(RocksDbWeight::get().writes((1 as u64).saturating_mul(p as u64)))
	}
}
